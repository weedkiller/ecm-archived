<?xml version="1.0"?>
<doc>
    <assembly>
        <name>dhtmlxConnector.NET</name>
    </assembly>
    <members>
        <member name="T:dhtmlxConnectors.Field">
            <summary>
            Represents column to be returned by sql query
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.Field.op_Equality(dhtmlxConnectors.Field,dhtmlxConnectors.Field)">
            <summary>
            Checks if fields are equal
            </summary>
            <param name="One">First field to compare</param>
            <param name="Two">Second field to compare</param>
            <returns>True if fields are equal</returns>
        </member>
        <member name="M:dhtmlxConnectors.Field.op_Inequality(dhtmlxConnectors.Field,dhtmlxConnectors.Field)">
            <summary>
            Checks if fields are not equal
            </summary>
            <param name="One">First field to compare</param>
            <param name="Two">Second field to compare</param>
            <returns>True if fields are not equal</returns>
        </member>
        <member name="M:dhtmlxConnectors.Field.Equals(System.Object)">
            <summary>
            Checks if this field equals to object provided
            </summary>
            <param name="obj">object to compare this field to</param>
            <returns>True if object provided is field and field is equal to this one</returns>
        </member>
        <member name="M:dhtmlxConnectors.Field.GetHashCode">
            <summary>
            Returns hash code for this field
            </summary>
            <returns>Hash code for this field</returns>
        </member>
        <member name="M:dhtmlxConnectors.Field.Clone">
            <summary>
            Clones this field
            </summary>
            <returns>Copy of field being cloned</returns>
        </member>
        <member name="P:dhtmlxConnectors.Field.Alias">
            <summary>
            Gets or Sets Alias to be used for this column
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.Field.ExternalName">
            <summary>
            Gets field name to be used while accessing this field in a result row. 
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.Field.InternalName">
            <summary>
            Gets field name to be used while accessing this field within the query
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.ExpressionField">
            <summary>
            Represents query column that is function, subquery
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.ExpressionField.ToString">
            <summary>
            Converts current column into SQL-92 string
            </summary>
            <returns>String representation of column</returns>
        </member>
        <member name="M:dhtmlxConnectors.ExpressionField.#ctor">
            <summary>
            Creates new instance of ExpressionField
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.ExpressionField.#ctor(System.String)">
            <summary>
            Creates new instance of ExpressionField
            </summary>
            <param name="Expression">sql expression to create this field for</param>
        </member>
        <member name="M:dhtmlxConnectors.ExpressionField.#ctor(System.String,System.String)">
            <summary>
            Creates new instance of ExpressionField
            </summary>
            <param name="Expression">sql expression to create this field for</param>
            <param name="Alias">Alias to identify expression by</param>
        </member>
        <member name="M:dhtmlxConnectors.ExpressionField.Clone">
            <summary>
            Clones this field
            </summary>
            <returns>Copy of field being cloned</returns>
        </member>
        <member name="P:dhtmlxConnectors.ExpressionField.Expression">
            <summary>
            Gets or Sets sql expression used for this field evaluation (e.g. "count(*)" or "(SELECT TOP 1 CityName FROM CITIES) AS RandomCity")
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.ExpressionField.ExternalName">
            <summary>
            Gets field name to be used when referencing this field outside the query (e.g. accessing specified column in DataTable)
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.ExpressionField.InternalName">
            <summary>
            Gets field name to be used when referencing this field inside the query
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.ObjectParser">
            <summary>
            Helper class for rendering object collections
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.ObjectParser.GetProperties(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get properties from the object instance
            </summary>
            <param name="source"></param>
            <param name="targetProperties"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.ObjectParser.GetProperties(System.Object,System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
            Get properties from the object instance
            </summary>
            <param name="source"></param>
            <param name="targetProperties"></param>
            <param name="additional"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.ObjectParser.GetProperties(System.Object,System.Collections.Generic.IEnumerable{dhtmlxConnectors.Field},dhtmlxConnectors.Field[])">
            <summary>
            Get properties from the object instance
            </summary>
            <param name="source"></param>
            <param name="targetProperties"></param>
            <param name="additional"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.ObjectParser.GetProperties(System.Object,System.Collections.Generic.IEnumerable{dhtmlxConnectors.Field})">
            <summary>
            Get properties from the object instance
            </summary>
            <param name="source"></param>
            <param name="targetProperties"></param>
            <returns></returns>
        </member>
        <member name="T:dhtmlxConnectors.MSSQLAdapter">
            <summary>
            Microsoft SQL Server 2000-2008 compatible implementation of idhtmlxDatabaseAdapter interface
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.IdhtmlxDatabaseAdapter">
            <summary>
            Provides sets of properties and methods supported by particular Database engine
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxDatabaseAdapter.ExecuteGetCountQuery(System.String,System.Collections.Generic.List{dhtmlxConnectors.Rule},System.String,System.String)">
            <summary>
            Executes query against table and returns number of records satisfying this query
            </summary>
            <param name="TableName">Table name to run query against to</param>
            <param name="Rules">Collection of query rules</param>
            <param name="groupBy">Group by fields</param>
            <param name="having">having statement</param>
            <returns>Number or records that satisfy select query provided</returns>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxDatabaseAdapter.ExecuteGetCountQuery(System.String,System.Collections.Generic.List{dhtmlxConnectors.Rule})">
            <summary>
            Executes query against table and returns number of records satisfying this query
            </summary>
            <param name="TableName">Table name to run query against to</param>
            <param name="Rules">Collection of query rules</param>
            <returns>Number or records that satisfy select query provided</returns>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxDatabaseAdapter.ExecuteGetCountQuery(System.String)">
            <summary>
            Executes query which return number of records number of records satisfying this query
            </summary>
            <param name="query"></param>
            <returns>Number or records that satisfy select query provided</returns>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxDatabaseAdapter.ExecuteSelectQuery(System.String,System.Collections.Generic.IEnumerable{dhtmlxConnectors.Field},System.Collections.Generic.List{dhtmlxConnectors.Rule},System.Collections.Generic.List{dhtmlxConnectors.OrderByStatement},System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Executes select table
            </summary>
            <param name="TableName">Table name to run query against to</param>
            <param name="RequestedFields">Fields collection to return</param>
            <param name="Rules">Collection of rules to apply to a query</param>
            <param name="OrderBy">OrderBy statements</param>
            <param name="StartIndex">First row index to include into result</param>
            <param name="Count">Total amount of records to include into result (e.g. 0, 1, 2, ... StartIndex, StartIndex + 1, ... StartIndex + Count, ...)</param>
            <param name="GroupBy">Group by fields</param>
            <param name="Having">Having statement</param>
            <returns>DataTable object that contains result of a query</returns>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxDatabaseAdapter.ExecuteDeleteQuery(System.String,dhtmlxConnectors.Field,System.Object)">
            <summary>
            Executes delete query
            </summary>
            <param name="TableName">Table name to delete records from</param>
            <param name="PrimaryKeyField">Column name to delete records by</param>
            <param name="PrimaryKeyValue">Target column value to delete records by</param>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxDatabaseAdapter.ExecuteUpdateQuery(System.String,System.Collections.Generic.Dictionary{dhtmlxConnectors.Field,System.String},dhtmlxConnectors.Field,System.Object)">
            <summary>
            Executes update query
            </summary>
            <param name="TableName">TableName that contains record to be updated</param>
            <param name="NewColumnValues">Collection of values to be updated in target query</param>
            <param name="PrimaryKeyField">Primary key field to search target record by</param>
            <param name="PrimaryKeyValue">Primary key field value </param>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxDatabaseAdapter.ExecuteInsertQuery(System.String,System.Collections.Generic.Dictionary{dhtmlxConnectors.Field,System.String},dhtmlxConnectors.Field,System.Object,dhtmlxConnectors.dhtmlxFieldsCollection)">
            <summary>
            Executed insert query
            </summary>
            <param name="TableName">Table name to insert record in</param>
            <param name="ColumnValues">Column values to insert</param>
            <param name="PrimaryKeyField">Primary Key column</param>
            <param name="PrimaryKeyValue">Primary key column value</param>
            <param name="AllFields">Collection of all tables fields</param>
            <returns>ID of inserted record</returns>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxDatabaseAdapter.ParseSqlQuery(System.String,System.String@,System.Collections.Generic.IEnumerable{dhtmlxConnectors.Field}@,System.Collections.Generic.List{dhtmlxConnectors.Rule}@,System.Collections.Generic.List{dhtmlxConnectors.OrderByStatement}@,System.Int32@,System.Int32@,System.String@,System.String@,dhtmlxConnectors.DataRequest.SourceType)">
            <summary>
            Parses SQL query into format used by connectors and DataRequest
            </summary>
            <param name="sqlQuery">Query to parse</param>
            <param name="TableName">TableName extracted from SQL query</param>
            <param name="RequestedFields">Column names extracted from SQL query</param>
            <param name="Rules">Collection of WHERE statements extracted from SQL query</param>
            <param name="OrderBy">Collection of ORDER BY statements extracted from SQL query</param>
            <param name="StartIndex">Row index, starting form which query result will be returned</param>
            <param name="Count">Number of rows to be returned from query result</param>
            <param name="GroupBy">Group By fields</param>
            <param name="Having">Having statements</param>
            <param name="queryType">Type of the query</param>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxDatabaseAdapter.ParseField(System.String)">
            <summary>
            Converts SQL representation of field into Field object
            </summary>
            <param name="FieldExpression">SQL representation of field(column)</param>
            <returns>Field object representation of expression provided</returns>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxDatabaseAdapter.IsFieldName(System.String)">
            <summary>
            Checkes if field name provided is column name or compound sql expression (subquery or anything else)
            </summary>
            <param name="FieldName">Expression to check</param>
            <returns>True if expression provided is valid column name</returns>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxDatabaseAdapter.ExecuteNonQuery(System.String)">
            <summary>
            Executes query against database providing no result
            </summary>
            <param name="Query">Query to execute</param>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxDatabaseAdapter.ExecuteScalar(System.String)">
            <summary>
            Executes query that returns single value
            </summary>
            <param name="Query">Query to execute</param>
            <returns>Value returned by query</returns>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxDatabaseAdapter.ExecuteSelectQuery(System.String)">
            <summary>
            Executes query that returns collection of rows
            </summary>
            <param name="Query">Query to execute</param>
            <returns>DataTable object that contains query result</returns>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxDatabaseAdapter.BeginTransaction">
            <summary>
            Starts transaction
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxDatabaseAdapter.CommitTransaction">
            <summary>
            Commits transaction
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxDatabaseAdapter.RollbackTransaction">
            <summary>
            Rollbacks transaction
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.IdhtmlxDatabaseAdapter.ConnectionString">
            <summary>
            Gets or Sets connection string
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.IdhtmlxDatabaseAdapter.SupportsTransactions">
            <summary>
            Gets value indicating whether current database adapter implementation supports transactions
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.ParseSqlQuery(System.String,System.String@,System.Collections.Generic.IEnumerable{dhtmlxConnectors.Field}@,System.Collections.Generic.List{dhtmlxConnectors.Rule}@,System.Collections.Generic.List{dhtmlxConnectors.OrderByStatement}@,System.Int32@,System.Int32@,System.String@,System.String@)">
            <summary>
            Parses SQL query into format used by connectors and DataRequest
            </summary>
            <param name="sqlQuery">Query to parse</param>
            <param name="TableName">TableName extracted from SQL query</param>
            <param name="RequestedFields">Column names extracted from SQL query</param>
            <param name="Rules">Collection of WHERE statements extracted from SQL query</param>
            <param name="OrderBy">Collection of ORDER BY statements extracted from SQL query</param>
            <param name="StartIndex">Row index, starting form which query result will be returned</param>
            <param name="Count">Number of rows to be returned from query result</param>
            <param name="GroupBy">Group by fields</param>
            <param name="Having">Having statement</param>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.ParseSqlQuery(System.String,System.String@,System.Collections.Generic.IEnumerable{dhtmlxConnectors.Field}@,System.Collections.Generic.List{dhtmlxConnectors.Rule}@,System.Collections.Generic.List{dhtmlxConnectors.OrderByStatement}@,System.Int32@,System.Int32@,System.String@,System.String@,dhtmlxConnectors.DataRequest.SourceType)">
            <summary>
            Parses SQL query into format used by connectors and DataRequest
            </summary>
            <param name="sqlQuery">Query to parse</param>
            <param name="TableName">TableName extracted from SQL query</param>
            <param name="RequestedFields">Column names extracted from SQL query</param>
            <param name="Rules">Collection of WHERE statements extracted from SQL query</param>
            <param name="OrderBy">Collection of ORDER BY statements extracted from SQL query</param>
            <param name="StartIndex">Row index, starting form which query result will be returned</param>
            <param name="Count">Number of rows to be returned from query result</param>
            <param name="GroupBy">Group by fields</param>
            <param name="Having">Having statement</param>
            <param name="queryType">Type of the query to parse</param>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.ParseFields(System.String)">
            <summary>
            Converts columns/fields stored in SQL query into Field objects collection
            </summary>
            <param name="Fields">Database engine specific representation of columns (e.g. "CustomerName, CustomerID, CreatedDate as RegisterDate")</param>
            <returns>Collection of Field objects that represent given fields list</returns>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.ParseField(System.String)">
            <summary>
            Converts SQL representation of field into Field object
            </summary>
            <param name="FieldExpression">SQL representation of field(column)</param>
            <returns>Field object representation of expression provided</returns>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.IsFieldName(System.String)">
            <summary>
            Checkes if field name provided is column name or compound sql expression (subquery or anything else)
            </summary>
            <param name="FieldName">Expression to check</param>
            <returns>True if expression provided is valid column name</returns>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.ParseRules(System.String)">
            <summary>
            Converts sql representation of WHERE statements into FieldRule objects collection
            </summary>
            <param name="Rules">T-SQL specific representation of WHERE statements</param>
            <returns>Collection of FieldRule objects that represent WHERE statements provided</returns>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.ParseOrders(System.String)">
            <summary>
            Converts sql representation of ORDER BY statements into OrderByField objects collection
            </summary>
            <param name="OrderBy">T-SQL specific representation of ORDER BY statements</param>
            <returns>Collection of OrderByField objects that represent ORDER BY statements provided</returns>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.#ctor">
            <summary>
            Creates new instance of MSSQLAdapter
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.#ctor(System.String)">
            <summary>
            Creates new instance of MSSQLAdapter
            </summary>
            <param name="ConnectionString">ConnectionString to initialize adapter by</param>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.CreateDeleteQuery(System.String,dhtmlxConnectors.Field,System.Object)">
            <summary>
            Creates T-SQL Delete query based on parameters provided
            </summary>
            <param name="TableName">Table name to delete record from</param>
            <param name="PrimaryKeyField">PrimaryKey field</param>
            <param name="PrimaryKeyValue">PrimaryKey value</param>
            <returns>T-SQL query for deleting record with parameters given</returns>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.CreateSelectQuery(System.String,System.Collections.Generic.IEnumerable{dhtmlxConnectors.Field},System.Collections.Generic.List{dhtmlxConnectors.Rule},System.Collections.Generic.List{dhtmlxConnectors.OrderByStatement},System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates T-SQL Select query based on parameters provided
            </summary>
            <param name="TableName">Table name to create query for</param>
            <param name="RequestedFields">Fields to include into result</param>
            <param name="Rules">Rules to apply to query</param>
            <param name="OrderBy">Order statements</param>
            <param name="StartIndex">Start index to take result rows from</param>
            <param name="Count">Number or rows to return</param>
            <param name="GroupBy">Group by fields</param>
            <param name="Having">having statements</param>
            <returns>Ready-to-execute T-SQL query</returns>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.CreateUpdateQuery(System.String,System.Collections.Generic.Dictionary{dhtmlxConnectors.Field,System.String},dhtmlxConnectors.Field,System.Object)">
            <summary>
            Created T-SQL Update query
            </summary>
            <param name="TableName">TableName to update records in</param>
            <param name="NewColumnValues">New columns values</param>
            <param name="PrimaryKeyField">PrimaryKey field</param>
            <param name="PrimaryKeyValue">PrimaryKey value</param>
            <returns>T-SQL Update query</returns>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.CreateInsertQuery(System.String,System.Collections.Generic.Dictionary{dhtmlxConnectors.Field,System.String})">
            <summary>
            Creates T-SQL Insert query
            </summary>
            <param name="TableName">Table name to insert record into</param>
            <param name="ColumnValues">Values to insert</param>
            <returns>T-SQL Insert query</returns>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.ExecuteGetCountQuery(System.String,System.Collections.Generic.List{dhtmlxConnectors.Rule},System.String,System.String)">
            <summary>
            Executes query against table and returns number of records satisfying this query
            </summary>
            <param name="TableName">Table name to run query against to</param>
            <param name="Rules">Collection of query rules</param>
            <param name="groupBy">Group By fields</param>
            <param name="having">having expression</param>
            <returns>Number or records that satisfy select query provided</returns>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.ExecuteGetCountQuery(System.String,System.Collections.Generic.List{dhtmlxConnectors.Rule})">
            <summary>
            Executes query against table and returns number of records satisfying this query
            </summary>
            <param name="TableName">Table name to run query against to</param>
            <param name="Rules">Collection of query rules</param>
            <returns>Number or records that satisfy select query provided</returns>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.ExecuteGetCountQuery(System.String)">
            <summary>
            Executes query against table and returns number of records satisfying this query
            </summary>
            <param name="query">Table name to run query against to</param>       
            <returns>Number or records that satisfy select query provided</returns>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.ExecuteSelectQuery(System.String,System.Collections.Generic.IEnumerable{dhtmlxConnectors.Field},System.Collections.Generic.List{dhtmlxConnectors.Rule},System.Collections.Generic.List{dhtmlxConnectors.OrderByStatement},System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Executes select table
            </summary>
            <param name="TableName">Table name to run query against to</param>
            <param name="RequestedFields">Fields collection to return</param>
            <param name="Rules">Collection of rules to apply to a query</param>
            <param name="OrderBy">OrderBy statements</param>
            <param name="StartIndex">First row index to include into result</param>
            <param name="Count">Total amount of records to include into result (e.g. 0, 1, 2, ... StartIndex, StartIndex + 1, ... StartIndex + Count, ...)</param>
            <param name="GroupBy">Group By fields</param>
            <param name="Having">Having statements</param>
            <returns>DataTable object that contains result of a query</returns>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.ExecuteDeleteQuery(System.String,dhtmlxConnectors.Field,System.Object)">
            <summary>
            Executes delete query
            </summary>
            <param name="TableName">Table name to delete records from</param>
            <param name="PrimaryKeyField">Column name to delete records by</param>
            <param name="PrimaryKeyValue">Target column value to delete records by</param>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.ExecuteUpdateQuery(System.String,System.Collections.Generic.Dictionary{dhtmlxConnectors.Field,System.String},dhtmlxConnectors.Field,System.Object)">
            <summary>
            Executes update query
            </summary>
            <param name="TableName">TableName that contains record to be updated</param>
            <param name="NewColumnValues">Collection of values to be updated in target query</param>
            <param name="PrimaryKeyField">Primary key field to search target record by</param>
            <param name="PrimaryKeyValue">Primary key field value </param>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.ExecuteInsertQuery(System.String,System.Collections.Generic.Dictionary{dhtmlxConnectors.Field,System.String},dhtmlxConnectors.Field,System.Object,dhtmlxConnectors.dhtmlxFieldsCollection)">
            <summary>
            Executes insert query
            </summary>
            <param name="TableName">Table name to insert record in</param>
            <param name="ColumnValues">Column values to insert</param>
            <param name="PrimaryKeyField">Primary Key column</param>
            <param name="PrimaryKeyValue">Primary key column value</param>
            <param name="AllFields">Collection of all tables fields</param>
            <returns>ID of inserted record</returns>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.ExecuteNonQuery(System.String)">
            <summary>
            Executes query against database providing no result
            </summary>
            <param name="Query">Query to execute</param>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.ExecuteScalar(System.String)">
            <summary>
            Executes query that returns single value
            </summary>
            <param name="Query">Query to execute</param>
            <returns>Value returned by query</returns>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.ExecuteSelectQuery(System.String)">
            <summary>
            Executes query that returns collection of rows
            </summary>
            <param name="Query">Query to execute</param>
            <returns>DataTable object that contains query result</returns>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.FetchDbConnection">
            <summary>
            Creates or returns existing IDbConnection object
            </summary>
            <returns>IDbConnection object</returns>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.CreateConnection(System.String)">
            <summary>
            Creates initialized opened IDbConnection object
            </summary>
            <param name="ConnectionString">ConnectionString to initialize connection by</param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.CreateCommand(System.String,System.Data.IDbConnection)">
            <summary>
            Creates IDbCommand object
            </summary>
            <param name="Query">Query to initialize command with</param>
            <param name="Connection">Connection to initialize command with</param>
            <returns>IDbCommand object</returns>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.CreateDataAdapter(System.Data.IDbCommand)">
            <summary>
            Creates IDbDataAdapter
            </summary>
            <param name="Command">Command to initialize adapter with</param>
            <returns>IDbDataAdapter object</returns>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.BeginTransaction">
            <summary>
            Starts transaction
            <remarks>When transaction is started, it created shadow connection object which will be active until transaction closed</remarks>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.CommitTransaction">
            <summary>
            Commits transaction
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.MSSQLAdapter.RollbackTransaction">
            <summary>
            Rollbacks transaction
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.MSSQLAdapter.ConnectionString">
            <summary>
            Gets or Sets connection string
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.MSSQLAdapter.SupportsTransactions">
            <summary>
            Gets value indicating whether current database adapter implementation supports transactions
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxDataJsonConnector">
            <summary>
            Serves dhtmlxJSONDataConnector client requests
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxConnector`1">
            <summary>
            Represents basic connector functionality 
            </summary>
            <typeparam name="T">Type of item connector will operate</typeparam>
        </member>
        <member name="T:dhtmlxConnectors.IdhtmlxConnector">
            <summary>
            Provides basic set of methods common for all xml-based dhtmlx connectors
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxConnector.ProcessRequest(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Process data and commands came from the client
            </summary>
            <param name="QueryString">QueryString collection of current request</param>
            <param name="Form">Form collection of current request</param>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxConnector.Render(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Renders commands result into XmlWriter
            </summary>
            <param name="xWriter">XmlWriter to render connector to</param>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxConnector.RenderResponse(System.Web.HttpResponse)">
            <summary>
            Renders commands result into HttpResponse
            </summary>
            <param name="response">HttpResponse instance to render connector to</param>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxConnector.RenderData(dhtmlxConnectors.IdhtmlxWriter,System.Data.DataTable,System.Int32)">
            <summary>
            Renders specified DataTable using connector-specific format into IdhtmlxConnector
            </summary>
            <param name="xWriter">IdhtmlxConnector to use for rendering</param>
            <param name="RowsToRender">DataTable object to render</param>
            <param name="TotalRowsCount">Total rows count in case if RowsToRender contains only portion of data available</param>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxConnector.RenderData(dhtmlxConnectors.IdhtmlxWriter,System.Collections.IEnumerable,System.Int32)">
            <summary>
            Renders specified collection using connector-specific format into IdhtmlxConnector
            </summary>
            <param name="xWriter">IdhtmlxConnector to use for rendering</param>
            <param name="Data">Data objects to render</param>
            <param name="TotalRowsCount">Total rows count in case if RowsToRender contains only portion of data available</param>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxConnector.RenderActions(dhtmlxConnectors.IdhtmlxWriter,System.Collections.Generic.IEnumerable{dhtmlxConnectors.DataAction})">
            <summary>
            Render executed actions result into response
            </summary>
            <param name="xWriter">XmlWriter to render result to</param>
            <param name="ResultsToRender">Collection of executed actions to render</param>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxConnector.DecodeField(System.String)">
            <summary>
            Decodes field name to Field object
            </summary>
            <param name="EncodedField">Encoded field name token from QueryString</param>
            <returns>Field object that corresponds EncodedField, or null</returns>
        </member>
        <member name="P:dhtmlxConnectors.IdhtmlxConnector.Request">
            <summary>
            Gets reference to instance of object that process current request
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxConnector`1._Request">
            <summary>
            Reference to DataRequest object
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.ProcessRequest(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Processes client commands token from QueryString and Form collections
            </summary>
            <param name="QueryString">QueryString collection of client request</param>
            <param name="Form">Form collection of client request</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.RenderSecurityKey(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.AttachProxyEvents">
            <summary>
            Add event listeners to DataRequest events to make their easy access by own events system
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.RenderResponse(System.Web.HttpResponse)">
            <summary>
            Renders processing results into current response
            </summary>
            <param name="response">HttpResponse object where to put results to</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.Render(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Renders processing results into IdhtmlxWriter
            </summary>
            <param name="xWriter">IdhtmlxWriter object where to put results to</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.RenderResponseHeader(System.Web.HttpResponse)">
            <summary>
            Renders and prepares xml specific headers
            </summary>
            <param name="response">HttpResponse object to use</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.RenderData(dhtmlxConnectors.IdhtmlxWriter,System.Data.DataTable,System.Int32)">
            <summary>
            Renders DataTable object into IdhtmlxWriter using connector-specific format
            </summary>
            <param name="xWriter">IdhtmlxWriter object to use for rendering</param>
            <param name="RowsToRender">Data to render</param>
            <param name="TotalRowsCount">Total rows count in case if RowsToRender doesn't contain all data</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.RenderData(dhtmlxConnectors.IdhtmlxWriter,System.Collections.IEnumerable,System.Int32)">
            <summary>
            Renders DataTable object into IdhtmlxWriter using connector-specific format
            </summary>
            <param name="xWriter">IdhtmlxWriter object to use for rendering</param>
            <param name="RowsToRender">Data to render</param>
            <param name="TotalRowsCount">Total rows count in case if RowsToRender doesn't contain all data</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.BeginRenderContent(dhtmlxConnectors.IdhtmlxWriter,System.Int32)">
            <summary>
            Writes begin tags of response header
            </summary>
            <param name="xWriter">IdhtmlxWriter to render content to</param>
            <param name="TotalRowsCount">Total amount of rows available</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.RenderSections(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.CreateDataItems(System.Data.DataTable)">
            <summary>
            Creates collection of connector specific data items from DataTable provided
            </summary>
            <param name="Rows">DataTable to create items from</param>
            <returns>Collection of connector specific data items</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.CreateDataItems(System.Collections.IEnumerable)">
            <summary>
            Creates collection of connector specific data items from IEnumerable provided
            </summary>
            <param name="objects">Objects collection to create items from</param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1._CreateDataItems(System.Collections.IEnumerable,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            
            </summary>
            <param name="objects"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.GetProperties(System.Object,dhtmlxConnectors.ObjectParser)">
            <summary>
            Gets list of requested properties from custom data object
            </summary>
            <param name="source"></param>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.RenderChildren(dhtmlxConnectors.IdhtmlxWriter,System.Collections.Generic.List{`0})">
            <summary>
            Renders children (data items) into IdhtmlxWriter provided
            </summary>
            <param name="xWriter">IdhtmlxWriter to render response to</param>
            <param name="dataItems">Data items to render</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.RenderActions(dhtmlxConnectors.IdhtmlxWriter,System.Collections.Generic.IEnumerable{dhtmlxConnectors.DataAction})">
            <summary>
            Renders results of data actions into IdhtmlxWriter provided
            </summary>
            <param name="xWriter">IdhtmlxWriter to render response to</param>
            <param name="ResultsToRender">Collection of DataAction object to render</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.FireBeforeOutputEvent(System.Object,dhtmlxConnectors.RenderEventArgs)">
            <summary>
            Event caller which can be used in extended classes
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.FireEndEvent(System.Object,dhtmlxConnectors.RenderEventArgs)">
            <summary>
            Event caller which can be used in extended classes
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.FireBeginEvent(System.Object,dhtmlxConnectors.RenderEventArgs)">
            <summary>
            Event caller which can be used in extended classes
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.EndRenderContent(dhtmlxConnectors.IdhtmlxWriter,System.Int32)">
            <summary>
            Writes end tags of response header
            </summary>
            <param name="xWriter">IdhtmlxWriter to render content to</param>
            <param name="TotalRowsCount">Total amount of rows available</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.DecodeField(System.String)">
            <summary>
            Decodes field name to Field object
            </summary>
            <param name="EncodedField">Encoded field name token from QueryString</param>
            <returns>Field object that corresponds EncodedField, or null</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.GetRecord(System.String)">
            <summary>
            gets single record by id
            </summary>
            <param name="id">id</param>
            <returns>data item</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.ParseExtraColumns(System.String)">
            <summary>
            Parses columns and put them into ExtraFields collection
            </summary>
            <param name="ExtraColumnNames">SQL string that contains extra column names</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.#ctor">
            <summary>
            Creates new instance of dhtmlxConnector
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.dhtmlxConnector_BeforeSelect(System.Object,System.EventArgs)">
            <summary>
            Attach BeforeSelect hook in order to make sure that ExtraFields are also included into request
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxConnector`1.SetDynamicLoading(System.Int32)">
            <summary>
            Sets number of rows returned by default
            </summary>
            <param name="RowsPerPage">Number of rows to be returned during initial request</param>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxConnector`1.Sections">
            <summary>
            Sections
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxConnector`1.Request">
            <summary>
            Gets reference to DataRequest object that is responsible for requests handling
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.ItemPrerender">
            <summary>
            Event to be called before item is going to render
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.BeforeRender">
            <summary>
            Event to be called before item is going to render
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.BeforeOutput">
            <summary>
            Event to be called before items items are going to render. This event is mostly necessary for writing additional xml info into response (e.g. grid header configuration)
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxConnector`1.HasBeforeOutputHandler">
            <summary>
            Checks if event handler is not null(so it can be checked in extended classes)
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.End">
            <summary>
            Event to be fired when all connector activity has been done
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxConnector`1.HasEndHandler">
            <summary>
            Checks if event handler is not null(so it can be checked in extended classes)
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.Begin">
            <summary>
            Event to be fired before any connector activity starts
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxConnector`1.HasBeginHandler">
            <summary>
            Checks if event handler is not null(so it can be checked in extended classes)
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.OnDBError">
            <summary>
            Event to be fired on database error
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.BeforeDataActionProcessing">
            <summary>
            Event to be fired before any DataAction is executed
            </summary> 
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.BeforeProcessing">
            <summary>
            Event to be fired before any DataAction is executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.DataActionProcessed">
            <summary>
            Event to be fired after any DataAction was executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.AfterProcessing">
            <summary>
            Event to be fired after any DataAction was executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.BeforeInsert">
            <summary>
            Event to be fired before any insert DataAction is executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.Inserted">
            <summary>
            Event to be fired after insert DataAction was executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.AfterInsert">
            <summary>
            Event to be fired after insert DataAction was executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.BeforeUpdate">
            <summary>
            Event to be fired before any update DataAction is executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.Updated">
            <summary>
            Event to be fired after Update DataAction was executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.AfterUpdate">
            <summary>
            Event to be fired after Update DataAction was executed
            </summary>  
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.BeforeDelete">
            <summary>
            Event to be fired before any delete DataAction is executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.Deleted">
            <summary>
            Event to be fired after delete DataAction was executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.AfterDelete">
            <summary>
            Event to be fired after delete DataAction was executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.BeforeSelect">
            <summary>
            Event to be fired before data select
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.Selected">
            <summary>
            Event to be fired after select results were retrieved
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxConnector`1.AfterSelect">
            <summary>
            Event to be fired after select results were retrieved
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxConnector`1.ExtraFields">
            <summary>
            Gets reference to collection of Field for being requested but not rendered
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataJsonConnector.#ctor(System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of dhtmlxDataViewConnector
            </summary>
            <param name="TableName">Select query to use for data retrieval</param>
            <param name="Columns">Type of adapter to use for communication with database engine</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataJsonConnector.#ctor(System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of dhtmlxDataViewConnector
            </summary>
            <param name="SelectQuery">Select query to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataJsonConnector.#ctor(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxDataViewConnector
            </summary>
            <param name="items">Collection of data to be rendered</param>
            <param name="Properties">Comma separated properties to be rendered</param>
            <param name="IdPropertyName"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataJsonConnector.#ctor(System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.Boolean)">
            <summary>
            Creates new instance of dhtmlxDataViewConnector
            </summary>
            <param name="SelectQuery">Select query to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataJsonConnector.CreateDataItems(System.Data.DataTable)">
            <summary>
            Creates collection of dhtmlxDataViewDataItem objects from DataTable provided
            </summary>
            <param name="Rows">Table to create dhtmlxComboItem objects from</param>
            <returns>Collection of dhtmlxComboItem objects</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataJsonConnector._CreateDataItems(System.Collections.IEnumerable,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            
            </summary>
            <param name="objects"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataJsonConnector.RenderResponse(System.Web.HttpResponse)">
            <summary>
            Renders processing results into current response
            </summary>
            <param name="response">HttpResponse object where to put results to</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataJsonConnector.RenderResponseHeader(System.Web.HttpResponse)">
            <summary>
            Renders and prepares xml specific headers
            </summary>
            <param name="response">HttpResponse object to use</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataJsonConnector.RenderActions(dhtmlxConnectors.IdhtmlxWriter,System.Collections.Generic.IEnumerable{dhtmlxConnectors.DataAction})">
            <summary>
            Renders results of data actions into XmlWriter provided
            </summary>
            <param name="xWriter">IdhtmlxWriter to render response to</param>
            <param name="ResultsToRender">Collection of DataAction object to render</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataJsonConnector.BeginRenderContent(dhtmlxConnectors.IdhtmlxWriter,System.Int32)">
            <summary>
            Writes begin tags of response header
            </summary>
            <param name="xWriter">IdhtmlxWriter to render content to</param>
            <param name="TotalRowsCount">Total amount of rows available</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataJsonConnector.RenderSections(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataJsonConnector.EndRenderContent(dhtmlxConnectors.IdhtmlxWriter,System.Int32)">
            <summary>
            Writes end tags of response header
            </summary>
            <param name="xWriter">IdhtmlxWriter to render content to</param>
            <param name="TotalRowsCount">Total amount of rows available</param>
        </member>
        <member name="T:dhtmlxConnectors.OrderByStatement">
            <summary>
            Represents single ORDER BY construct element
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.ExpressionRule">
            <summary>
            Represents WHERE statement as SQL expression (e.g. "dbo.getDay(RegisterDate) IN ['Sat', 'Sun']")
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.Rule">
            <summary>
            Base class for WHERE statements
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.ExpressionRule.#ctor">
            <summary>
            Creates new instance of ExpressionRule
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.ExpressionRule.#ctor(System.String)">
            <summary>
            Creates new instance of ExpressionRule
            </summary>
            <param name="Expression">SQL Expression to initialize rule with</param>
        </member>
        <member name="M:dhtmlxConnectors.ExpressionRule.ToString">
            <summary>
            Converts rule into SQL-92 compatible string
            </summary>
            <returns>String that represents current instance of ExpressionRule</returns>
        </member>
        <member name="P:dhtmlxConnectors.ExpressionRule.Expression">
            <summary>
            Gets or Sets rule sql expression
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.DataRequest">
            <summary>
            Bridge class between connectors and database adapters. Class is responsible for parsing client request and processing basic data operations (sorting, filtering, selecting etc.)
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.ProcessRequest(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Processes client request and performs operations requested by client components
            </summary>
            <param name="QueryString">QueryString collection of current request</param>
            <param name="Form">Form collection fof current request</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.ProcessEditRequest(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Processes client requests which modify data
            </summary>
            <param name="QueryString">QueryString collection of current request</param>
            <param name="Form">Form collection fof current request</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.ParseDataActions(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Converts data actions from query string format to DataAction objects collection
            </summary>
            <param name="QueryString">QueryString collection that contains client data actions</param>
            <returns>Collection of DataAction objects</returns>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.ProcessDataAction(dhtmlxConnectors.DataAction)">
            <summary>
            Executes DataAction object (if it's not marked as completed)
            </summary>
            <param name="Action">DataAction object to execute</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.DoInsertAction(dhtmlxConnectors.DataAction)">
            <summary>
            Executes Insert DataAction
            </summary>
            <param name="Action">DataAction to execute</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.DoUpdateAction(dhtmlxConnectors.DataAction)">
            <summary>
            Executes Update DataAction
            </summary>
            <param name="Action">DataAction to execute</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.DoDeleteAction(dhtmlxConnectors.DataAction)">
            <summary>
            Executes Delete DataAction
            </summary>
            <param name="Action">DataAction to execute</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.ParseSQLTemplate(System.String,System.Collections.Generic.Dictionary{dhtmlxConnectors.Field,System.String},dhtmlxConnectors.Field,System.Object)">
            <summary>
            Converts custom SQL template into ready-to-execute sql statement
            </summary>
            <param name="SQL">SQL template</param>
            <param name="Data">Collection of field-value pairs to use for template population</param>
            <param name="PrimaryKeyField">Primary key field</param>
            <param name="PrimaryKeyValue">Primary key value</param>
            <returns>Ready-to-execute sql statement</returns>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.AssertHasAccess(dhtmlxConnectors.AccessRights)">
            <summary>
            Checks if current security settings allow DataRequest run particular database operation. If DataRequest has unsufficient access rights - exception will be thrown
            </summary>
            <param name="DesiredAccess">Access rights to check</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.ParseActionType(System.String)">
            <summary>
            Converts string representation of ActionType into ActionType enum instance. If type is unknown - ActionType.Custom will be returned.
            </summary>
            <param name="Value">Value to convert</param>
            <returns>ActionType that represents value provided. If type is unknown - ActionType.Custom will be returned.</returns>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.GetRowValues(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Excracts column-value pairs came from client string into its object representation
            </summary>
            <param name="QueryString">QueryString to process</param>
            <param name="rowID">RowID to extract fields for (come from QueryString also)</param>
            <returns>Collection of Field-value pairs</returns>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.GetUserDataValues(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Extracts key-value userdata items from query string
            </summary>
            <param name="QueryString">QueryString to process</param>
            <param name="rowID">RowID to extract userdata for (come from QueryString also)</param>
            <returns>Collection of key-value pairs</returns>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.GetCurrentMode(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Gets type of current request
            </summary>
            <param name="QueryString">QueryString collection for current request</param>
            <returns>DataRequestType value that represents current request type (Select or Edit)</returns>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.GetRecord(System.String)">
            <summary>
            get single record by id
            </summary>
            <param name="id">name value c</param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.UpdateSelectParams(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Updates DataRequest settigns with new ones token from client request QueryString collection
            </summary>
            <param name="QueryString">QueryString to take new parameters from</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.ParseQueryStringRuleItem(System.String,System.String)">
            <summary>
            Converts rule stored in QueryString into its object representation
            </summary>
            <param name="ParamName">Name of QueryString parameter that represents FieldRule</param>
            <param name="ParamValue">Value of QueryString parameter that represents FieldRule</param>
            <returns>FieldRule object</returns>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.ParseQueryStringOrderByItem(System.String,System.String)">
            <summary>
            Converts OrderByField stored in QueryString into its object representation
            </summary>
            <param name="ParamName">Name of QueryString parameter that represents OrderByField</param>
            <param name="ParamValue">Value of QueryString parameter that represents OrderByField</param>
            <returns>OrderByField object</returns>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.Render(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Outputs DataAction of Select results into XmlWriter provided
            </summary>
            <param name="xWriter">Writer where to put rendered results</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.Initialize(System.String,System.String,System.String)">
            <summary>
            Initializes own properties
            </summary>
            <param name="SelectQuery">Query to be parsed</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name</param>
            <param name="ParentIDColumnName">ForeignKey column name</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.Initialize(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes own properties
            </summary>
            <param name="SelectQuery">Query to be parsed</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name</param>
            <param name="ParentIDColumnName">ForeignKey column name</param>
            <param name="asIs">Defines whether request should parse input sql</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.InitializeColumns(System.String)">
            <summary>
            Initializes list of columns
            </summary>
            <param name="Columns">Comma delimited collection of columns to select</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.Initialize(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes own properties
            </summary>
            <param name="TableName">TableName to run queries against</param>
            <param name="Columns">Comma delimited collection of columns to select</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name</param>
            <param name="ParentIDColumnName">ForeignKey column name</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.AddMissingQueryFields">
            <summary>
            Adds columns into RequestedFields collection that supposed to be retrieven from server, but was not mentioned in RequestedFields collection
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.#ctor(dhtmlxConnectors.IdhtmlxConnector)">
            <summary>
            Creates instance of DataRequest
            </summary>
            <param name="Connector">Connector to use for results output</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.#ctor(dhtmlxConnectors.IdhtmlxConnector,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates instance of DataRequest
            </summary>
            <param name="Connector">Connector to use for results output</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">Connection string to use for DatabaseAdapter initialization</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.#ctor(dhtmlxConnectors.IdhtmlxConnector,dhtmlxConnectors.IdhtmlxDatabaseAdapter)">
            <summary>
            Creates instance of DataRequest
            </summary>
            <param name="Connector">Connector to use for results output</param>
            <param name="Adapter">DatabaseAdapter to use for communication with database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.#ctor(dhtmlxConnectors.IdhtmlxConnector,System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of DataRequest
            </summary>
            <param name="Connector">Connector to use for results output</param>
            <param name="SelectQuery">Select query to use for data requests</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name. Used to identify single row</param>
            <param name="ParentIDColumnName">ForeignKey column name. Used to link child rows to parents</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">DatabaseAdapter connection string</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.#ctor(dhtmlxConnectors.IdhtmlxConnector,System.Collections.IEnumerable,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="data"></param>
            <param name="Columns"></param>
            <param name="PrimaryKeyColumnName"></param>
            <param name="ParentIDColumnName"></param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.#ctor(dhtmlxConnectors.IdhtmlxConnector,System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.Boolean)">
            <summary>
            Creates new instance of DataRequest
            </summary>
            <param name="Connector">Connector to use for results output</param>
            <param name="SelectQuery">Select query to use for data requests</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name. Used to identify single row</param>
            <param name="ParentIDColumnName">ForeignKey column name. Used to link child rows to parents</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">DatabaseAdapter connection string</param>
            <param name="asIs">Defines whether request should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.#ctor(dhtmlxConnectors.IdhtmlxConnector,System.String,System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter)">
            <summary>
            Creates new instance of DataRequest
            </summary>
            <param name="Connector">Connector to use for results output</param>
            <param name="SelectQuery">Select query to use for data requests</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name. Used to identify single row</param>
            <param name="ParentIDColumnName">ForeignKey column name. Used to link child rows to parents</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.#ctor(dhtmlxConnectors.IdhtmlxConnector,System.String,System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter,System.Boolean)">
            <summary>
            Creates new instance of DataRequest
            </summary>
            <param name="Connector">Connector to use for results output</param>
            <param name="SelectQuery">Select query to use for data requests</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name. Used to identify single row</param>
            <param name="ParentIDColumnName">ForeignKey column name. Used to link child rows to parents</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
            <param name="asIs">Defines whether request should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.#ctor(dhtmlxConnectors.IdhtmlxConnector,System.String,System.String,System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter)">
            <summary>
            Creates new instance of DataRequest
            </summary>
            <param name="Connector">Connector to use for results output</param>
            <param name="TableName">Table name to run queries against to</param>
            <param name="Columns">Columns to include into result</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name. Used to identify single row</param>
            <param name="ParentIDColumnName">ForeignKey column name. Used to link child rows to parents</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.#ctor(dhtmlxConnectors.IdhtmlxConnector,System.String,System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of DataRequest
            </summary>
            <param name="Connector">Connector to use for results output</param>
            <param name="TableName">Table name to run queries against to</param>
            <param name="Columns">Columns to include into result</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name. Used to identify single row</param>
            <param name="ParentIDColumnName">ForeignKey column name. Used to link child rows to parents</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">DatabaseAdapter connection string</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.InitializeKeyFields(System.String,System.String)">
            <summary>
            Initializes primary and foreign key fields
            </summary>
            <param name="PrimaryKeyColumnName">Name of column to be used and PrimaryKey field</param>
            <param name="ParentIDColumnName">Name of column to be used as ForeignKey field</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.InitializeFromSql(System.String,System.String,System.Boolean)">
            <summary>
            Initializes TableName, RequestedFields, OrderBy, Rules, PrimaryKeyField from SQL query and PrimaryKey column name
            </summary>
            <param name="SqlQuery">SQL Query to be used for initialization</param>
            <param name="PrimaryKey">Column name to be used for PrimaryKeyField initialization</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="F:dhtmlxConnectors.DataRequest._RequestType">
            <summary>
            Stores request type(select of edit)
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.DataRequest._DataActions">
            <summary>
            List of data actions
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.DataRequest.ConvertActionType(dhtmlxConnectors.ActionType)">
            <summary>
            converts action type to new connectors format
            </summary>
            <param name="type">ActionType</param>
            <returns>string</returns>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.ActionParam">
            <summary>
            Request property, which should store action type, '!nativeeditor_status' by default
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.IdAppended">
            <summary>
            Flag wich set true when private key field is added to requested fields
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.EnableHierarchicalDynamicLoading">
            <summary>
            Enables or disables dynamic items loading for hierarchical dhtml controls. If set to true, only top items will be returned to the client.
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.TotalCount">
            <summary>
            Allows to explicitely define total items count in dataset. Can be used for dynamic loading from object datasource
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.GetCountQuery">
            <summary>
            Query, that should return total rows count in datasource, will be used for dynamic loading and paging
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.EnableSingleRecordSelect">
            <summary>
            Enables loading of single row from data table. If set to true request will select record with id equal with 'id' key in rules.
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.RootItemRelationIDValue">
            <summary>
            Gets or Sets foreign key value that is specific for root items in rows hierarchy
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.RelationIDValue">
            <summary>
            Gets or Sets current ForeignKey value for rows level being selected
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.AllowPrimaryKeyUpdate">
            <summary>
            Gets or Sets value indicating whether primary key columns can be inserted or updated. Default value is false - primary key fields are immutable
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.DataRequest.OnDBError">
            <summary>
            Event to be fired on database error
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.DataRequest.BeforeDataActionProcessing">
            <summary>
            Event to be fired before any DataAction is executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.DataRequest.BeforeProcessing">
            <summary>
            Event to be fired before any DataAction is executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.DataRequest.DataActionProcessed">
            <summary>
            Event to be fired after any DataAction was executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.DataRequest.AfterProcessing">
            <summary>
            Event to be fired after any DataAction was executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.DataRequest.BeforeInsert">
            <summary>
            Event to be fired before any insert DataAction is executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.DataRequest.Inserted">
            <summary>
            Event to be fired after insert DataAction was executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.DataRequest.AfterInsert">
            <summary>
            Event to be fired after insert DataAction was executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.DataRequest.BeforeUpdate">
            <summary>
            Event to be fired before any update DataAction is executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.DataRequest.Updated">
            <summary>
            Event to be fired after Update DataAction was executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.DataRequest.AfterUpdate">
            <summary>
            Event to be fired after Update DataAction was executed
            </summary>  
        </member>
        <member name="E:dhtmlxConnectors.DataRequest.BeforeDelete">
            <summary>
            Event to be fired before any delete DataAction is executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.DataRequest.Deleted">
            <summary>
            Event to be fired after delete DataAction was executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.DataRequest.AfterDelete">
            <summary>
            Event to be fired after delete DataAction was executed
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.DataRequest.BeforeSelect">
            <summary>
            Event to be fired before data select
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.DataRequest.Selected">
            <summary>
            Event to be fired after select results were retrieved
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.DataRequest.AfterSelect">
            <summary>
            Event to be fired after select results were retrieved
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.Mode">
            <summary>
            
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.CustomSQLs">
            <summary>
            Gets reference to collection of sql templates for database operations(INSERT, UPDATE, DELETE) used instead of standard ones.
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.QueryType">
            <summary>
            Defines if sql query is stored procedure call
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.Connector">
            <summary>
            Gets reference to dhtmlxConnector which is responsible for rendering responses in format specific to particular dhtmlx control
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.AdapterType">
            <summary>
            Gets adapter type used for communication with database engine chosen
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.Adapter">
            <summary>
            Gets IdhtmlxDatabaseAdapter instance that is responsible for all database-level operations such as execution queries, parsing and generating database-specific sql, etc.
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.RequestedFields">
            <summary>
            Gets collection of fields to be requested from table
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.TableName">
            <summary>
            Gets or Sets table name for data to be requested from (e.g. Customers)
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.PrimaryKeyField">
            <summary>
            Gets or Sets field to use as identifier for items/rows selected
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.ParentRecordIDField">
            <summary>
            Gets or Sets field that stores id of parent item/row 
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.Rules">
            <summary>
            Gets or Sets collection of rules to be applied on resurned data (e.g. all statements coming after WHERE clause will come to this collection: SELECT * FROM )
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.OrderBy">
            <summary>
            Gets reference to collection of Order By statements for current query
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.StartIndex">
            <summary>
            Gets or Sets row index to start select from
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.Count">
            <summary>
            Gets or Sets total rows number to be returned
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.AllowedAccess">
            <summary>
            Gets or Sets operations flags allowed for execution for current DataRequest
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.TransactionMode">
            <summary>
            Gets or Sets transactions mode for database operations made by this DataRequest
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.RequestType">
            <summary>
            Gets current operation to be executed by DataRequest
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataRequest.DataActions">
            <summary>
            Gets reference to the collection that contains DataActions to be executed during requrest (except for select)
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.DataRequest.Modes">
            <summary>
            
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.DataRequest.Modes.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.DataRequest.Modes.DataCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.DataRequest.SourceType">
            <summary>
            Type of the select query, it can be stored procedure, or simple query/tablename, or complex query, which must be executed as is, withou any processing
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.DataRequest.SourceType.Default">
            <summary>
            Regular query/table name
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.DataRequest.SourceType.StoredProcedure">
            <summary>
            Stored procedure call
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.DataRequest.SourceType.AsIsQuery">
            <summary>
            Complex query, which can't be parsed by connector
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxTreeGridConnector">
            <summary>
            Serves client requests came from dhtmlxTreeGrid component
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxGridConnectorBase`1">
            <summary>
            Provides base functionality to all grid-oriented connectors
            </summary>
            <typeparam name="T">Type of grid element</typeparam>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConnectorBase`1.EndRenderContent(dhtmlxConnectors.IdhtmlxWriter,System.Int32)">
            <summary>
            Writes end tags to response header
            </summary>
            <param name="xWriter">XmlWriter to write response to</param>
            <param name="TotalRowsCount">Total rows count</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConnectorBase`1.GetFieldIndex(dhtmlxConnectors.Field)">
            <summary>
            Gets field index by object
            </summary>
            <param name="field">Field to find index for</param>
            <returns>Field index or -1 if not found</returns>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxGridConnectorBase`1.OptionsConnectors">
            <summary>
            Gets rederence to list of dhtmlxOptionsConnector need for rendering comboboxes in grid columns/headers
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxGridConnectorBase`1.ExplicitOptions">
            <summary>
            Gets reference to collection of hardcoded options lists to be rendered as dropdown lists in grid columns/headers
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector.#ctor(System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.String,System.Boolean)">
            <summary>
            Creates new instance of dhtmlxTreeGridConnector
            </summary>
            <param name="SelectQuery">Select query to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="ParentIDColumnName">ForeignKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="ExtraColumnNames">Columns to be included into select query, but ignored during render event</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector.#ctor(System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxTreeGridConnector
            </summary>
            <param name="SelectQuery">Select query to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="ParentIDColumnName">ForeignKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="ExtraColumnNames">Columns to be included into select query, but ignored during render event</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector.#ctor(System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.Boolean)">
            <summary>
            Creates new instance of dhtmlxTreeGridConnector
            </summary>
            <param name="SelectQuery">Select query to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="ParentIDColumnName">ForeignKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector.#ctor(System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of dhtmlxTreeGridConnector
            </summary>
            <param name="SelectQuery">Select query to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="ParentIDColumnName">ForeignKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector.#ctor(System.String,System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxTreeGridConnector
            </summary>
            <param name="TableName">Table name to run query against</param>
            <param name="Columns">Columns to select</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="ParentIDColumnName">ForeignKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="ExtraColumnNames">Columns to be included into select query, but ignored during render event</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector.#ctor(System.String,System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of dhtmlxTreeGridConnector
            </summary>
            <param name="TableName">Table name to run query against</param>
            <param name="Columns">Columns to select</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="ParentIDColumnName">ForeignKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector.#ctor(System.String,System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter,System.String)">
            <summary>
            Creates new instance of dhtmlxTreeGridConnector
            </summary>
            <param name="SelectQuery">Select query to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="ParentIDColumnName">ForeignKey column name (nullable)</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
            <param name="ExtraColumnNames">Columns to be included into select query, but ignored during render event</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector.#ctor(System.String,System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter)">
            <summary>
            Creates new instance of dhtmlxTreeGridConnector
            </summary>
            <param name="SelectQuery">Select query to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="ParentIDColumnName">ForeignKey column name (nullable)</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector.#ctor(System.String,System.String,System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter,System.String)">
            <summary>
            Creates new instance of dhtmlxTreeGridConnector
            </summary>
            <param name="TableName">Table name to run query against</param>
            <param name="Columns">Columns to select</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="ParentIDColumnName">ForeignKey column name (nullable)</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
            <param name="ExtraColumnNames">Columns to be included into select query, but ignored during render event</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector.#ctor(System.Collections.IEnumerable,System.String,System.String,System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxTreeGridConnector
            </summary>
            <param name="items">Table name to run query against</param>
            <param name="Properties">Columns to select</param>
            <param name="IdPropertyName">PrimaryKey column name (nullable)</param>
            <param name="ParentIDPropertyName">ForeignKey column name (nullable)</param>
            <param name="ExtraPropertiesNames">Columns to be included into select query, but ignored during render event</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector.#ctor(System.Collections.IEnumerable,System.String,System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxTreeGridConnector
            </summary>
            <param name="items">Table name to run query against</param>
            <param name="Properties">Columns to select</param>
            <param name="IdPropertyName">PrimaryKey column name (nullable)</param>
            <param name="ParentIDPropertyName">ForeignKey column name (nullable)</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector.#ctor(System.String,System.String,System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter)">
            <summary>
            Creates new instance of dhtmlxTreeGridConnector
            </summary>
            <param name="TableName">Table name to run query against</param>
            <param name="Columns">Columns to select</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="ParentIDColumnName">ForeignKey column name (nullable)</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector.BeginRenderContent(dhtmlxConnectors.IdhtmlxWriter,System.Int32)">
            <summary>
            Writes begin tags of response header
            </summary>
            <param name="xWriter">XmlWriter to render content to</param>
            <param name="TotalRowsCount">Total amount of rows available</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector.CreateDataItems(System.Data.DataTable)">
            <summary>
            Creates collection of dhtmlxTreeGridDataItem from DataTable provided
            </summary>
            <param name="Rows">DataTable to create items from</param>
            <returns>Collection of dhtmlxTreeGridDataItem objects</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector.CreateItemsLevel(System.Data.DataTable,dhtmlxConnectors.FieldRule)">
            <summary>
            Creates single level of dhtmlxTreeGridDataItem objects united by the same ForeignKey value
            </summary>
            <param name="AllItems">Reference to collection that contains all avilable items</param>
            <param name="GetChildrenRule">FieldRule to use for appropriate items selection (e.g. "parentID = 15")</param>
            <returns>Collection of dhtmlxTreeGridDataItem items located at specified level</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector._CreateDataItems(System.Collections.IEnumerable,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            
            </summary>
            <param name="objects"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector.getItems(System.Collections.IEnumerable,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            
            </summary>
            <param name="objects"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector.CreateLevels(System.Collections.IEnumerable,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector._ParseItem(System.Object,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            
            </summary>
            <param name="sour"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridConnector.DecodeField(System.String)">
            <summary>
            Decodes field name to Field object
            </summary>
            <param name="EncodedField">Encoded field name token from QueryString</param>
            <returns>Field object that corresponds EncodedField, or null</returns>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeGridConnector.EnableDynamicLoading">
            <summary>
            Gets or Sets value indicating either all content will be returned at once or by portions
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeGridConnector.RootItemRelationIDValue">
            <summary>
            Gets or Sets ForeignKey column value for root rows
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxTreeGridConnector.RequestHasChildren">
            <summary>
            Event to be called when connector tries to analyze whether particular row has child rows or not. Event will not called if EnableDynamicLoading is false
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxDataItem">
            <summary>
            Represents single data item of dhtmlxConnector result
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataItem.GetAttribValue(System.String)">
            <summary>
            Gets custom attribute value by its name. If attribute doesn't persist - empty string will be returned
            </summary>
            <param name="AttribName">Attribute name</param>
            <returns>Attribute value or empty string</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataItem.SetAttribValue(System.String,System.String)">
            <summary>
            Sets attribute value by its name
            </summary>
            <param name="AttribName">Attribute name</param>
            <param name="AttribValue">Attribute value to set</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataItem.Render(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Renders data item into XmlWriter
            </summary>
            <param name="xWriter">XmlWriter to write response to</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataItem.RenderContent(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Renders item content into XmlWriter
            </summary>
            <param name="xWriter">XmlWriter to write response to</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataItem.RenderStartContent(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Outputs DataItem content to IdhtmlxWriter
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataItem.RenderUserData(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Outputs DataItem UserData to IdhtmlxWriter
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataItem.RenderEndContent(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Outputs DataItem content to IdhtmlxWriter
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataItem.CallPrerender(System.Object,System.EventArgs)">
            <summary>
            Calls prerender event
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event argumens</param>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxDataItem.UserData">
            <summary>
            Stores item userData collection
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxDataItem.Index">
            <summary>
            Gets or Sets item index in the list of other items
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxDataItem.Skip">
            <summary>
            Gets or Sets value indicating that data item will not be rendered(Prerender event will be caused anyway)
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxDataItem.ID">
            <summary>
            Gets or Sets value that identifies this item
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxDataItem.DataFields">
            <summary>
            Gets reference to collection of Key-Value pairs that represents data fields of this item
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxDataItem.CustomAttribs">
            <summary>
            Gets reference to collection of custom attributes to be rendered into response
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxDataItem.Prerender">
            <summary>
            Event that is called before item writes its content into response
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxDataItem.HasPrerender">
            <summary>
            Gets value indicating either this data item has Prerender event attached
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxChartConnector">
            <summary>
            Serves dhtmlxChart client requests
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxDataViewConnector">
            <summary>
            Serves dhtmlxDataView client requests
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataViewConnector.#ctor(System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of dhtmlxDataViewConnector
            </summary>
            <param name="TableName">Select query to use for data retrieval</param>
            <param name="Columns">Type of adapter to use for communication with database engine</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataViewConnector.#ctor(System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.Boolean)">
            <summary>
            Creates new instance of dhtmlxDataViewConnector
            </summary>
            <param name="SelectQuery">Select query to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataViewConnector.#ctor(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxDataViewConnector
            </summary>
            <param name="items">Collection of data to be rendered</param>
            <param name="Properties">Comma separated properties to be rendered</param>
            <param name="PrimaryKeyPropertyName"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataViewConnector.#ctor(System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of dhtmlxDataViewConnector
            </summary>
            <param name="SelectQuery">Select query to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataViewConnector.BeginRenderContent(dhtmlxConnectors.IdhtmlxWriter,System.Int32)">
            <summary>
            Writes begin tags of response header
            </summary>
            <param name="xWriter">XmlWriter to render content to</param>
            <param name="TotalRowsCount">Total amount of rows available</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataViewConnector.CreateDataItems(System.Data.DataTable)">
            <summary>
            Creates collection of dhtmlxDataViewDataItem objects from DataTable provided
            </summary>
            <param name="Rows">Table to create dhtmlxComboItem objects from</param>
            <returns>Collection of dhtmlxComboItem objects</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataViewConnector._CreateDataItems(System.Collections.IEnumerable,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            
            </summary>
            <param name="objects"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxChartConnector.#ctor(System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of dhtmlxDataViewConnector
            </summary>
            <param name="TableName">Select query to use for data retrieval</param>
            <param name="Columns">Type of adapter to use for communication with database engine</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxChartConnector.#ctor(System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of dhtmlxGridConnector
            </summary>
            <param name="SelectQuery">Select query to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString</param>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxSchedulerDataItem">
            <summary>
            Represents scheduler event
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxSchedulerDataItem.RenderStartContent(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Outputs DataItem content to IdhtmlxWriter
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxSchedulerDataItem.StartDate">
            <summary>
            Gets or Sets event start date
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxSchedulerDataItem.FinishDate">
            <summary>
            Gets or Sets event finish date
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxFieldsCollection">
            <summary>
            Class that represents fields collection
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxFieldsCollection.#ctor(System.Collections.Generic.IEnumerable{dhtmlxConnectors.Field})">
            <summary>
            Creates new instance of dhtmlxFieldsCollection class
            </summary>
            <param name="fields">Set of fields to initialize collection with</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxFieldsCollection.#ctor">
            <summary>
            Creates new instance of dhtmlxFieldsCollection class
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxFieldsCollection.AddRange(System.Collections.Generic.IEnumerable{dhtmlxConnectors.Field})">
            <summary>
            Adds set of fields into collection
            </summary>
            <param name="fields">Fields to add into collection</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxFieldsCollection.Contains(dhtmlxConnectors.Field)">
            <summary>
            Checks if specified field is in collection
            </summary>
            <param name="field">Field to check</param>
            <returns>True if specified field is in collection</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxFieldsCollection.Contains(System.String)">
            <summary>
            Checks if specified field is in collection
            </summary>
            <param name="FieldName">field name to check</param>
            <returns>True if specified field is in collection</returns>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxFieldsCollection.Item(System.String)">
            <summary>
            Gets reference to a field by its name
            </summary>
            <param name="Name">Name or Alias to find field by</param>
            <returns>Reference to a field by name given, or null</returns>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxTreeDataJsonConnector">
            <summary>
            Json Connector for dhtmlTouch Tree view
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxTreeDataConnector">
            <summary>
            Connector for dhtmlTouch Tree view
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxTreeConnector">
            <summary>
            Serves dhtmlxTree components requests
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeConnector.Initialize(System.String)">
            <summary>
            Initializes properties
            </summary>
            <param name="NodeTextColumnName">String name of NodeTextField column</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeConnector.#ctor">
            <summary>
            Creates new instance of dhtmlxTreeConnector
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeConnector.#ctor(System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.String,System.Boolean)">
            <summary>
            Creates new instance of dhtmlxTreeConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="ParentIDColumnName">ForeignKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="NodeTextColumnName">Name of column to take nodes text</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeConnector.#ctor(System.Collections.IEnumerable,System.String,System.String,System.String)">
            <summary>
            Initialize tree connector from plain collection of objects
            </summary>
            <param name="items">Collection of tree items</param>
            <param name="IdProperty">Id property name</param>
            <param name="TextProperty">Name of the property to take node text</param>
            <param name="parentId">Property with id of parent item</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeConnector.#ctor(System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxTreeConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="ParentIDColumnName">ForeignKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="NodeTextColumnName">Name of column to take nodes text</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeConnector.#ctor(System.String,System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter,System.String,System.Boolean)">
            <summary>
            Creates new instance of dhtmlxTreeConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="ParentIDColumnName">ForeignKey column name (nullable)</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
            <param name="NodeTextColumnName">Name of column to take nodes text</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeConnector.#ctor(System.String,System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter,System.String)">
            <summary>
            Creates new instance of dhtmlxTreeConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="ParentIDColumnName">ForeignKey column name (nullable)</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
            <param name="NodeTextColumnName">Name of column to take nodes text</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeConnector.CreateDataItems(System.Data.DataTable)">
            <summary>
            Creates collection of dhtmlxTreeDataItem objects from DataTable provided
            </summary>
            <param name="Rows">Table to create dhtmlxTreeDataItem objects from</param>
            <returns>Collection of dhtmlxTreeDataItem objects</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeConnector._CreateDataItems(System.Collections.IEnumerable,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            
            </summary>
            <param name="objects"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeConnector.getItems(System.Collections.IEnumerable,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            
            </summary>
            <param name="objects"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeConnector.CreateLevels(System.Collections.IEnumerable,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeConnector._CreateDataItem">
            <summary>
            Returns new dhtmlxTreeDataItem object
            </summary>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeConnector._ParseItem(System.Object,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            
            </summary>
            <param name="sour"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeConnector.CreateItemsLevel(System.Data.DataTable,dhtmlxConnectors.FieldRule)">
            <summary>
            Creates single level of dhtmlxTreeDataItem objects united by the same ForeignKey value
            </summary>
            <param name="AllItems">Reference to collection that contains all avilable items</param>
            <param name="GetChildrenRule">FieldRule to use for appropriate items selection (e.g. "parentID = 15")</param>
            <returns>Collection of dhtmlxTreeDataItem items located at specified level</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeConnector.BeginRenderContent(dhtmlxConnectors.IdhtmlxWriter,System.Int32)">
            <summary>
            Writes begin tags of response header
            </summary>
            <param name="xWriter">XmlWriter to render content to</param>
            <param name="TotalRowsCount">Total amount of rows available</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeConnector.DecodeField(System.String)">
            <summary>
            Decodes field name to Field object
            </summary>
            <param name="EncodedField">Encoded field name token from QueryString</param>
            <returns>Field object that corresponds EncodedField, or null</returns>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeConnector.NodeTextField">
            <summary>
            Gets or Sets field to take nodes text from
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeConnector.EnableDynamicLoading">
            <summary>
            Enables or Disables load-on-demand functionality when only items level requested is loaded. If disabled, whole tree at once will be rendered
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeConnector.RootItemRelationIDValue">
            <summary>
            Gets or Sets value ForeignKey field of root nodes
            </summary>
        </member>
        <member name="E:dhtmlxConnectors.dhtmlxTreeConnector.RequestHasChildren">
            <summary>
            Event to be called when connector tries to analyze whether particular node has child nodes or not. Event will not called if EnableDynamicLoading is false
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataConnector.#ctor(System.String,System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.String,System.Boolean)">
            <summary>
            Creates new instance of dhtmlxTreeConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="Columns">Columns to be rendered</param>
            <param name="ParentIDColumnName">ForeignKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="ExtraColumns">Columns to be included into select query, but ignored during render event</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataConnector.#ctor(System.String,System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of dhtmlxTreeConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="Columns">Columns to be rendered</param>
            <param name="ParentIDColumnName">ForeignKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataConnector.#ctor(System.String,System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxTreeConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="Columns">Columns to be rendered</param>
            <param name="ParentIDColumnName">ForeignKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="ExtraFields">Columns to be included into select query, but ignored during render event</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataConnector.#ctor(System.Collections.IEnumerable,System.String,System.String,System.String)">
            <summary>
            Initialize tree connector from plain collection of objects
            </summary>
            <param name="items">Collection of tree items</param>
            <param name="IdProperty">Id property name</param>
            <param name="TextProperty">Name of the property to take node text</param>
            <param name="parentId">Property with id of parent item</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataConnector._CreateDataItem">
            <summary>
            Returns new dhtmlxTreeDataItem object
            </summary>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataConnector.RenderActions(dhtmlxConnectors.IdhtmlxWriter,System.Collections.Generic.IEnumerable{dhtmlxConnectors.DataAction})">
            <summary>
            Renders results of data actions into XmlWriter provided
            </summary>
            <param name="xWriter">IdhtmlxWriter to render response to</param>
            <param name="ResultsToRender">Collection of DataAction object to render</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataConnector.BeginRenderContent(dhtmlxConnectors.IdhtmlxWriter,System.Int32)">
            <summary>
            Writes begin tags of response header
            </summary>
            <param name="xWriter">XmlWriter to render content to</param>
            <param name="TotalRowsCount">Total amount of rows available</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataJsonConnector.#ctor(System.String,System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.String,System.Boolean)">
            <summary>
            Creates new instance of dhtmlxTreeDataJsonConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="Columns">Columns to be rendered</param>
            <param name="ParentIDColumnName">ForeignKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="ExtraColumns">Columns to be included into select query, but ignored during render event</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataJsonConnector.#ctor(System.String,System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of dhtmlxTreeDataJsonConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="Columns">Columns to be rendered</param>
            <param name="ParentIDColumnName">ForeignKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataJsonConnector.#ctor(System.String,System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxTreeDataJsonConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="Columns">Columns to be rendered</param>
            <param name="ParentIDColumnName">ForeignKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="ExtraColumns">Columns to be included into select query, but ignored during render event</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataJsonConnector.#ctor(System.Collections.IEnumerable,System.String,System.String,System.String)">
            <summary>
            Initialize dhtmlxTreeDataJsonConnector from plain collection of objects
            </summary>
            <param name="items">Collection of tree items</param>
            <param name="IdProperty">Id property name</param>
            <param name="TextProperty">Name of the property to take node text</param>
            <param name="parentId">Property with id of parent item</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataJsonConnector._CreateDataItem">
            <summary>
            Returns new dhtmlxTreeDataItem object
            </summary>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataJsonConnector.BeginRenderContent(dhtmlxConnectors.IdhtmlxWriter,System.Int32)">
            <summary>
            Writes begin tags of response header
            </summary>
            <param name="xWriter">IdhtmlxWriter to render content to</param>
            <param name="TotalRowsCount">Total amount of rows available</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataJsonConnector.RenderSections(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataJsonConnector.EndRenderContent(dhtmlxConnectors.IdhtmlxWriter,System.Int32)">
            <summary>
            Writes end tags of response header
            </summary>
            <param name="xWriter">IdhtmlxWriter to render content to</param>
            <param name="TotalRowsCount">Total amount of rows available</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataJsonConnector.RenderResponse(System.Web.HttpResponse)">
            <summary>
            Renders processing results into current response
            </summary>
            <param name="response">HttpResponse object where to put results to</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataJsonConnector.RenderResponseHeader(System.Web.HttpResponse)">
            <summary>
            Renders and prepares xml specific headers
            </summary>
            <param name="response">HttpResponse object to use</param>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxTreeMultitableConnector">
            <summary>
            dhtmlxTreeMultitableConnector
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeMultitableConnector.#ctor(dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of dhtmlxTreeMultitableConnector
            </summary>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeMultitableConnector.#ctor(dhtmlxConnectors.IdhtmlxDatabaseAdapter)">
            <summary>
            Creates new instance of dhtmlxTreeMultitableConnector
            </summary>
            <param name="Adapter">Adapter to use for communication with database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeMultitableConnector.RenderQuery(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Process SQL query or table
            </summary>
            <param name="SelectSource">Table name or SQL query</param>
            <param name="PrimaryKeyColumnName"></param>
            <param name="ParentIDColumnName"></param>
            <param name="NodeTextColumnName"></param>
            <param name="asIs">Defines whether connector should parse Sql query, to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeMultitableConnector.RenderQuery(System.String,System.String,System.String,System.String)">
            <summary>
            Process SQL query or table
            </summary>
            <param name="SelectSource">Table name or SQL query</param>
            <param name="PrimaryKeyColumnName"></param>
            <param name="ParentIDColumnName"></param>
            <param name="NodeTextColumnName"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeMultitableConnector.ParseId(System.String,System.Boolean)">
            <summary>
            Parse multitable item id
            </summary>
            <param name="id"></param>
            <param name="setLevel"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeMultitableConnector.ParseId(System.String)">
            <summary>
            Parse mulititable item id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeMultitableConnector.GetLevel(System.Web.HttpRequest)">
            <summary>
            Get current request level
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeMultitableConnector.idTranslateBefore(System.Object,dhtmlxConnectors.DataActionProcessingEventArgs)">
            <summary>
            remove level prefix from id, parent id and set new id before processing
            </summary>
            <param name="sender"></param>
            <param name="action"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeMultitableConnector.idTranslateAfter(System.Object,dhtmlxConnectors.DataActionProcessingEventArgs)">
            <summary>
            Add level prefix in id and new id after processing
            </summary>
            <param name="sender"></param>
            <param name="action"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeMultitableConnector.outIds(System.Object,dhtmlxConnectors.ItemPrerenderEventArgs{dhtmlxConnectors.dhtmlxTreeDataItem})">
            <summary>
            Add level prefix in id and new id after processing
            </summary>
            <param name="sender"></param>
            <param name="action"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeMultitableConnector.beforeOut(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeMultitableConnector.rulesIds(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeMultitableConnector.hasChildren(System.Object,dhtmlxConnectors.RequestChildrenEventArgs{dhtmlxConnectors.dhtmlxTreeDataItem})">
            <summary>
            Add level prefix in id and new id after processing
            </summary>
            <param name="sender"></param>
            <param name="action"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeMultitableConnector.ProcessRequest(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Processes client commands token from QueryString and Form collections
            </summary>
            <param name="QueryString">QueryString collection of client request</param>
            <param name="Form">Form collection of client request</param>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeMultitableConnector.Level">
            <summary>
            Current level
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeMultitableConnector.MaxLevel">
            <summary>
            Max level
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxOptionsItem">
            <summary>
            Represents dhtmlxGrid(treeGrid) combobox item
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxComboItem">
            <summary>
            Data item for dhtmlxComboConnector
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxComboItem.RenderUserData(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Outputs DataItem content to IdhtmlxWriter
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxComboItem.RenderStartContent(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Outputs DataItem content to IdhtmlxWriter
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxComboItem.Value">
            <summary>
            Gets or Sets value used for option identification (the same as ID)
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxComboItem.Text">
            <summary>
            Gets or Sets item's visible text
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxComboItem.Selected">
            <summary>
            Gets or Sets selected state of the item
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsItem.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Creates new instance of dhtmlxOptionsItem
            </summary>
            <param name="Value">Option's value</param>
            <param name="Text">Option's text</param>
            <param name="Index">Option's position</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsItem.#ctor(System.String,System.Int32)">
            <summary>
            Creates new instance of dhtmlxOptionsItem
            </summary>
            <param name="Text">Option's text</param>
            <param name="Index">Option's position</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsItem.#ctor(System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxOptionsItem
            </summary>
            <param name="Value">Option's value</param>
            <param name="Text">Option's text</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsItem.#ctor(System.String)">
            <summary>
            Creates new instance of dhtmlxOptionsItem
            </summary>
            <param name="Text">Option's value</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsItem.RenderStartContent(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Outputs DataItem content to IdhtmlxWriter
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxOptionsItem.UseTextOnly">
            <summary>
            Gets or Sets value indicating whether to include Value into response
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxFormConnector">
            <summary>
            Serves dhtmlxForm client requests
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxFormConnector.#ctor(System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of dhtmlxFormConnector
            </summary>
            <param name="TableName">Select query to use for data retrieval</param>
            <param name="Columns">Type of adapter to use for communication with database engine</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxFormConnector.#ctor(System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.Boolean)">
            <summary>
            Creates new instance of dhtmlxFormConnector
            </summary>
            <param name="SelectQuery">Select query to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxFormConnector.#ctor(System.Object,System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxFormConnector
            </summary>
            <param name="data">Object to be sended to form</param>
            <param name="Properties">Properties to be rendered</param>
            <param name="IdPropertyName">Id property name</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxFormConnector.#ctor(System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of dhtmlxFormConnector
            </summary>
            <param name="SelectQuery">Select query to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxFormConnector.BeginRenderContent(dhtmlxConnectors.IdhtmlxWriter,System.Int32)">
            <summary>
            Writes begin tags of response header
            </summary>
            <param name="xWriter">XmlWriter to render content to</param>
            <param name="TotalRowsCount">Total amount of rows available</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxFormConnector.CreateDataItems(System.Data.DataTable)">
            <summary>
            Creates collection of dhtmlxFormDataItem objects from DataTable provided
            </summary>
            <param name="Rows">Table to create dhtmlxFormDataItem objects from</param>
            <returns>Collection of dhtmlxFormDataItem objects</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxFormConnector._CreateDataItems(System.Collections.IEnumerable,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            
            </summary>
            <param name="objects"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxComboConnector">
            <summary>
            Serves dhtmlxCombo component requests
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxComboConnector.Initialize(dhtmlxConnectors.DataRequest,System.String)">
            <summary>
            Initilize properties
            </summary>
            <param name="Request">DataRequest object to use</param>
            <param name="ItemTextColumnName">Column name from where to take Text property of combo items</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxComboConnector.Request_BeforeSelect(System.Object,System.EventArgs)">
            <summary>
            Hook to modify select query by combo specific parameters token from QueryString
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxComboConnector.#ctor(System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxComboConnector using adapter type and connection string
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="ItemTextColumnName">Column name to take option's Text property from</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxComboConnector.#ctor(System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.String,System.Boolean)">
            <summary>
            Creates new instance of dhtmlxComboConnector using adapter type and connection string
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="ItemTextColumnName">Column name to take option's Text property from</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxComboConnector.#ctor(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Render collection of items
            </summary>
            <param name="items"></param>
            <param name="valuePropertyName"></param>
            <param name="textPropertyName"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxComboConnector.#ctor(System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter,System.String)">
            <summary>
            Creates new instance of dhtmlxComboConnector using ready-to-use database adapter
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
            <param name="ItemTextColumnName">Column name to take option's Text property from</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxComboConnector.#ctor(System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter,System.String,System.Boolean)">
            <summary>
            Creates new instance of dhtmlxComboConnector using ready-to-use database adapter
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
            <param name="ItemTextColumnName">Column name to take option's Text property from</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxComboConnector.GetProperties(System.Object,dhtmlxConnectors.ObjectParser)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxComboConnector._CreateDataItems(System.Collections.IEnumerable,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            
            </summary>
            <param name="objects"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxComboConnector.CreateDataItems(System.Data.DataTable)">
            <summary>
            Creates collection of dhtmlxComboItem from DataTable provided
            </summary>
            <param name="Rows">DataTable to create items from</param>
            <returns>Collection of dhtmlxComboItem objects</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxComboConnector.BeginRenderContent(dhtmlxConnectors.IdhtmlxWriter,System.Int32)">
            <summary>
            Writes begin tags of response header
            </summary>
            <param name="xWriter">XmlWriter to render content to</param>
            <param name="TotalRowsCount">Total amount of rows available</param>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxComboConnector.ItemTextField">
            <summary>
            Gets or Sets reference to Field object from where to take options Text property
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.ConnectorSecurity">
            <summary>
            Class that handles XSS and CSRF security
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.ConnectorSecurity.CheckCSRF(dhtmlxConnectors.DataRequestType)">
            <summary>
            Check request for CSRF attack
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:dhtmlxConnectors.ConnectorSecurity.Escape(System.String)">
            <summary>
            
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.ConnectorSecurity.CleanHtml(System.String)">
            <summary>
            
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="P:dhtmlxConnectors.ConnectorSecurity.SecurityKey">
            <summary>
            Defines if connectors should sign requests to prevent CSRF attacks
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.ConnectorSecurity.XSS">
            <summary>
            Input data sanitization policy
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.ConnectorSecurity.SecutiryXSS">
            <summary>
            Input data sanitization policy modes
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.ConnectorSecurity.SecutiryXSS.DHX_SECURITY_SAFETEXT">
            <summary>
            Remove html from input data
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.ConnectorSecurity.SecutiryXSS.DHX_SECURITY_SAFEHTML">
            <summary>
            Remove dangerous html elements only
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.ConnectorSecurity.SecutiryXSS.DHX_SECURITY_TRUSTED">
            <summary>
            Do not escape input
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.Log">
            <summary>
            Provides public interface to logging functionality
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.Log.WriteLine(System.Object,System.String)">
            <summary>
            Writes message to log
            </summary>
            <param name="context">Object associated with this message</param>
            <param name="Message">Message to log</param>
        </member>
        <member name="P:dhtmlxConnectors.Log.Enabled">
            <summary>
            Gets or Sets enabled state for logging system
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.Log.Listeners">
            <summary>
            Gets reference to collection of trace listeners
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.OdbcOracleAdapter">
            <summary>
            Oracle compatible implementation of idhtmlxDatabaseAdapter interface
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.OdbcAdapter">
            <summary>
            ODBC compatible implementation of idhtmlxDatabaseAdapter interface
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.OdbcAdapter.CreateConnection(System.String)">
            <summary>
            Creates initialized opened IDbConnection object
            </summary>
            <param name="ConnectionString">ConnectionString to initialize connection by</param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.OdbcAdapter.CreateCommand(System.String,System.Data.IDbConnection)">
            <summary>
            Creates IDbCommand object
            </summary>
            <param name="Query">Query to initialize command with</param>
            <param name="Connection">Connection to initialize command with</param>
            <returns>IDbCommand object</returns>
        </member>
        <member name="M:dhtmlxConnectors.OdbcAdapter.CreateDataAdapter(System.Data.IDbCommand)">
            <summary>
            Creates IDbDataAdapter
            </summary>
            <param name="Command">Command to initialize adapter with</param>
            <returns>IDbDataAdapter object</returns>
        </member>
        <member name="M:dhtmlxConnectors.OdbcAdapter.CreateInsertQuery(System.String,System.Collections.Generic.Dictionary{dhtmlxConnectors.Field,System.String})">
            <summary>
            Creates SQL Insert query
            </summary>
            <param name="TableName">Table name to insert record into</param>
            <param name="ColumnValues">Values to insert</param>
            <returns>SQL Insert query</returns>
        </member>
        <member name="M:dhtmlxConnectors.OdbcAdapter.CreateLastInsertedQuery(System.String,dhtmlxConnectors.Field)">
            <summary>
            Creates query to retrieve last inserted id
            </summary>
            <param name="TableName">Table name</param>      
            <param name="primary">Table primary key</param>
            <returns>SQL Select query</returns>
        </member>
        <member name="M:dhtmlxConnectors.OdbcAdapter.ExecuteInsertQuery(System.String,System.Collections.Generic.Dictionary{dhtmlxConnectors.Field,System.String},dhtmlxConnectors.Field,System.Object,dhtmlxConnectors.dhtmlxFieldsCollection)">
            <summary>
            Executes insert query
            </summary>
            <param name="TableName">Table name to insert record in</param>
            <param name="ColumnValues">Column values to insert</param>
            <param name="PrimaryKeyField">Primary Key column</param>
            <param name="PrimaryKeyValue">Primary key column value</param>
            <param name="AllFields">Collection of all tables fields</param>
            <returns>ID of inserted record</returns>
        </member>
        <member name="M:dhtmlxConnectors.OdbcAdapter.CreateSelectQuery(System.String,System.Collections.Generic.IEnumerable{dhtmlxConnectors.Field},System.Collections.Generic.List{dhtmlxConnectors.Rule},System.Collections.Generic.List{dhtmlxConnectors.OrderByStatement},System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates SQL Select query based on parameters provided
            </summary>
            <param name="TableName">Table name to create query for</param>
            <param name="RequestedFields">Fields to include into result</param>
            <param name="Rules">Rules to apply to query</param>
            <param name="OrderBy">Order statements</param>
            <param name="StartIndex">Start index to take result rows from</param>
            <param name="Count">Number or rows to return</param>
            <param name="GroupBy">Group by fields</param>
            <param name="Having">Having statement</param>
            <returns>Ready-to-execute SQL query</returns>
        </member>
        <member name="M:dhtmlxConnectors.OdbcOracleAdapter.CreateLastInsertedQuery(System.String,dhtmlxConnectors.Field)">
            <summary>
            Creates query to retrieve last inserted id
            </summary>
            <param name="TableName">Table name</param>      
            <param name="primary">Table primary key</param>
            <returns>SQL Select query</returns>
        </member>
        <member name="M:dhtmlxConnectors.OdbcOracleAdapter.CreateInsertQuery(System.String,System.Collections.Generic.Dictionary{dhtmlxConnectors.Field,System.String})">
            <summary>
            Creates SQL Insert query
            </summary>
            <param name="TableName">Table name to insert record into</param>
            <param name="ColumnValues">Values to insert</param>
            <returns>SQL Insert query</returns>
        </member>
        <member name="M:dhtmlxConnectors.OdbcOracleAdapter.ExecuteInsertQuery(System.String,System.Collections.Generic.Dictionary{dhtmlxConnectors.Field,System.String},dhtmlxConnectors.Field,System.Object,dhtmlxConnectors.dhtmlxFieldsCollection)">
            <summary>
            Executes insert query
            </summary>
            <param name="TableName">Table name to insert record in</param>
            <param name="ColumnValues">Column values to insert</param>
            <param name="PrimaryKeyField">Primary Key column</param>
            <param name="PrimaryKeyValue">Primary key column value</param>
            <param name="AllFields">Collection of all tables fields</param>
            <returns>ID of inserted record</returns>
        </member>
        <member name="M:dhtmlxConnectors.OdbcOracleAdapter.CreateSelectQuery(System.String,System.Collections.Generic.IEnumerable{dhtmlxConnectors.Field},System.Collections.Generic.List{dhtmlxConnectors.Rule},System.Collections.Generic.List{dhtmlxConnectors.OrderByStatement},System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates T-SQL Select query based on parameters provided
            </summary>
            <param name="TableName">Table name to create query for</param>
            <param name="RequestedFields">Fields to include into result</param>
            <param name="Rules">Rules to apply to query</param>
            <param name="OrderBy">Order statements</param>
            <param name="StartIndex">Start index to take result rows from</param>
            <param name="Count">Number or rows to return</param>
            <param name="GroupBy">Group by fields</param>
            <param name="Having">Having statement</param>
            <returns>Ready-to-execute SQL query</returns>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxJSONWriter">
            <summary>
            connectors JSON response Writter
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.IdhtmlxWriter">
            <summary>
            basic functionality for dhtmlxWritter
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxWriter.WriteStartDocument(System.String)">
            <summary>
            Writes begin document symbol
            </summary>
            <param name="title">string</param>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxWriter.WriteStartDocument">
            <summary>
            Writes begin document symbol
            </summary> 
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxWriter.WriteEndDocument">
            <summary>
            Writes end document symbol
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxWriter.WriteStartElement(System.String)">
            <summary>
            Writes begining of element record symbol
            </summary>
            <param name="title">string</param>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxWriter.WriteStartElement">
            <summary>
            Writes begining of element record symbol
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxWriter.WriteEndElement">
            <summary>
            Writes end of element record symbol
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxWriter.WriteField(System.String,System.String)">
            <summary>
            Writes record field
            </summary>
            <param name="name">field name</param>
            <param name="value">field value</param>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxWriter.WriteString(System.String)">
            <summary>
            Writes string 
            </summary>
            <param name="value">value</param>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxWriter.WriteAttribute(System.String,System.String)">
            <summary>
            Writes record's attribute
            </summary>
            <param name="name">attribute name</param>
            <param name="value">attribute value</param>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxWriter.GetResult">
            <summary>
            Returns resulting string
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:dhtmlxConnectors.IdhtmlxWriter.WriteRawString(System.String)">
            <summary>
            Writes string without
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxJSONWriter.#ctor(System.Text.StringBuilder)">
            <summary>
            creates instance of dhtmlxXMLWriter
            </summary>
            <param name="builder">String builder</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxJSONWriter.WriteStartDocument(System.String)">
            <summary>
            writes start document tag
            </summary>
            <param name="title">start document tag</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxJSONWriter.WriteStartDocument">
            <summary>
            writes start document tag
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxJSONWriter.WriteStartArray">
            <summary>
            writes start array sign
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxJSONWriter.WriteEndArray">
            <summary>
            writes end array sign
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxJSONWriter.WriteAttribute(System.String,System.String)">
            <summary>
            writes xml attribute
            </summary>
            <param name="name">attribute name</param>
            <param name="value">attribute value</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxJSONWriter.WriteEndDocument">
            <summary>
            closes document tag
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxJSONWriter.WriteField(System.String,System.String)">
            <summary>
            writes name-value field, in this case simple xml node with text content
            </summary>
            <param name="name">node name</param>
            <param name="value">node value</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxJSONWriter.WriteStartElement(System.String)">
            <summary>
            opens element tag
            </summary>
            <param name="title">element tag</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxJSONWriter.WriteStartElement">
            <summary>
            opens element tag
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxJSONWriter.WriteEndElement">
            <summary>
            closes element tag
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxJSONWriter.WriteString(System.String)">
            <summary>
            writes string
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxJSONWriter.GetResult">
            <summary>
            returns result document
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxJSONWriter.WriteRawString(System.String)">
            <summary>
            writes non escaped sting
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:dhtmlxConnectors.OrderByExpression">
            <summary>
            Represents ORDER BY unparsed sql statement
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.OrderByExpression.#ctor">
            <summary>
            Creates new instance of OrderByExpression
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.OrderByExpression.#ctor(System.String)">
            <summary>
            Creates new instance of OrderByExpression
            </summary>
            <param name="Expression">SQL Expression to initialize order statement with</param>
        </member>
        <member name="M:dhtmlxConnectors.OrderByExpression.ToString">
            <summary>
            Converts statement into SQL-92 compatible string
            </summary>
            <returns>String that represents current instance of OrderByExpression</returns>
        </member>
        <member name="P:dhtmlxConnectors.OrderByExpression.Expression">
            <summary>
            Gets or Sets order by sql expression
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.ConversionType">
            <summary>
            Supported convering modes
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.ConversionType.PDF">
            <summary>
            Convert to PDF
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.ConversionType.Excell">
            <summary>
            Convert To Excell
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.ConvertService">
            <summary>
            Provides convert functionality
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.ConvertService.#ctor(dhtmlxConnectors.dhtmlxGridConnector,System.String)">
            <summary>
            creates instance of ConvertService class
            </summary>
            <param name="conn">connector</param>
            <param name="url">URI for conversion</param>
        </member>
        <member name="M:dhtmlxConnectors.ConvertService.PDF">
            <summary>
            applying settings for pdf conversion
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.ConvertService.PDF(System.String)">
            <summary>
            applying settings for pdf conversion
            </summary>
            <param name="name">output file name</param>
        </member>
        <member name="M:dhtmlxConnectors.ConvertService.PDF(System.String,System.Boolean)">
            <summary>
            applying settings for pdf conversion
            </summary>
            <param name="name">output file name</param>
            <param name="inline">inline mode</param>
        </member>
        <member name="M:dhtmlxConnectors.ConvertService.Excel">
            <summary>
            applying settings for excell conversion
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.ConvertService.Excel(System.String)">
            <summary>
            applying settings for excell conversion
            </summary>
            <param name="name">output file name</param>      
        </member>
        <member name="M:dhtmlxConnectors.ConvertService.Excel(System.String,System.Boolean)">
            <summary>
            applying settings for excell conversion
            </summary>
            <param name="name">output file name</param>
            <param name="inline">inline mode</param>
        </member>
        <member name="M:dhtmlxConnectors.ConvertService.as_file(System.Web.HttpResponse,System.String,System.String,System.Boolean)">
            <summary>
            set response headers for file output
            </summary>
            <param name="output">HttpResponse</param>
            <param name="size">size</param>
            <param name="name">name</param>
            <param name="inline">inline</param>
        </member>
        <member name="M:dhtmlxConnectors.ConvertService.convert(dhtmlxConnectors.IdhtmlxConnector,System.Web.HttpResponse,dhtmlxConnectors.dhtmlxXMLWriter)">
            <summary>
            converts grid data
            </summary>
            <param name="conn">IdhtmlxConnector</param>
            <param name="output">HttpResponse</param>
            <param name="_out">dhtmlxXMLWriter</param>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxFormDataItem">
            <summary>
            Represents dhtmlxDataView data item
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxFormDataItem.RenderStartContent(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Outputs DataItem content to IdhtmlxWriter
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxTreeDataDataItem">
            <summary>
            Node of dhtmlxDataTree
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxTreeDataItem">
            <summary>
            Represents node of dhtmlxTree connector
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataItem.RenderStartContent(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Outputs DataItem content to IdhtmlxWriter
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataItem.RenderUserData(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Outputs DataItem userData to IdhtmlxWriter
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataItem.RenderEndContent(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Outputs DataItem content to IdhtmlxWriter
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeDataItem.Value">
            <summary>
            Gets or Sets value that identifies this item (is absolutely the same as ID property)
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeDataItem.Text">
            <summary>
            Gets or Sets node text
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeDataItem.LeafImage">
            <summary>
            Gets or Sets image name to be applied if this item has no children
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeDataItem.FolderClosedImage">
            <summary>
            Gets or Sets image name to be applied when this node is collapsed and has children
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeDataItem.FolderOpenedImage">
            <summary>
            Gets or Sets image name to be applied when this node is expanded and has children
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeDataItem.Checked">
            <summary>
            Gets or Sets checked state of an item
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeDataItem.HasChildren">
            <summary>
            Gets or Sets value indicating whether this item has child items (makes sense in case of EnableDynamicLoading mode enabled in connector)
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeDataItem.ChildNodes">
            <summary>
            Gets reference to collection of child nodes
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataDataItem.RenderStartContent(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Outputs DataItem content to IdhtmlxWriter
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataDataItem.RenderUserData(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Outputs DataItem userData to IdhtmlxWriter
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeDataDataItem.HasChildren">
            <summary>
            Gets or Sets value indicating whether this item has child items (makes sense in case of EnableDynamicLoading mode enabled in connector)
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxGridDataItem">
            <summary>
            Represents grid row
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridDataItem.SetExtraColumns(System.Collections.Generic.List{System.String})">
            <summary>
            Sets column names to be ignored during render event
            </summary>
            <param name="ExtraColumnNames">Column names collection</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridDataItem.RenderStartContent(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Outputs DataItem content to IdhtmlxWriter
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxGridDataItem.CssClass">
            <summary>
            Gets or Sets custom css class name to apply to the row
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxGridDataItem.BgColor">
            <summary>
            Gets or Sets background color of the row
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxGridDataItem.Style">
            <summary>
            Gets or Sets custom style attributes
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxGridDataItem.ExtraColumnNames">
            <summary>
            Gets or Sets reference to collection column names to be ignored during render event
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxRequestHandler">
            <summary>
            Provides base functionality for handling dhtmlx components requests
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxRequestHandler.CreateConnector(System.Web.HttpContext)">
            <summary>
            When overriden in derived class, creates dhtmlxConnector to serve current request. This is the only approved way of dhtmlxConnector intialization
            </summary>
            <param name="context">Current HttpContext</param>
            <returns>Instance dhtmlxConnector class to serve current request</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxRequestHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Processes client request. All connectors functionality happens here
            </summary>
            <param name="context">Current HttpContext</param>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxRequestHandler.IsReusable">
            <summary>
            Gets value indicating whether current service can be used. dhtmlxRequestHandler cannot be reused.
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxRequestHandler.Connector">
            <summary>
            Gets reference to dhtmlxConnector serving current request
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.DataRequestSDT">
            <summary>
            Bridge class between connectors and database adapters. Class is responsible for parsing client request and processing basic data operations (sorting, filtering, selecting etc.)
            DataRequestSDT supports simple data transfer protocol
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.DataRequestSDT.#ctor(dhtmlxConnectors.IdhtmlxConnector,System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.Boolean)">
            <summary>
            Creates new instance of DataRequest
            </summary>
            <param name="Connector">Connector to use for results output</param>
            <param name="SelectQuery">Select query to use for data requests</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name. Used to identify single row</param>
            <param name="ParentIDColumnName">ForeignKey column name. Used to link child rows to parents</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">DatabaseAdapter connection string</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequestSDT.#ctor(dhtmlxConnectors.IdhtmlxConnector,System.String,System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter,System.Boolean)">
            <summary>
            Creates new instance of DataRequest
            </summary>
            <param name="Connector">Connector to use for results output</param>
            <param name="SelectQuery">Select query to use for data requests</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name. Used to identify single row</param>
            <param name="ParentIDColumnName">ForeignKey column name. Used to link child rows to parents</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequestSDT.#ctor(dhtmlxConnectors.IdhtmlxConnector,System.Collections.IEnumerable,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="data"></param>
            <param name="Columns"></param>
            <param name="PrimaryKeyColumnName"></param>
            <param name="ParentIDColumnName"></param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequestSDT.#ctor(dhtmlxConnectors.IdhtmlxConnector,System.String,System.String,System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter)">
            <summary>
            Creates new instance of DataRequest
            </summary>
            <param name="Connector">Connector to use for results output</param>
            <param name="TableName">Table name to run queries against to</param>
            <param name="Columns">Columns to include into result</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name. Used to identify single row</param>
            <param name="ParentIDColumnName">ForeignKey column name. Used to link child rows to parents</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequestSDT.#ctor(dhtmlxConnectors.IdhtmlxConnector,System.String,System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of DataRequest
            </summary>
            <param name="Connector">Connector to use for results output</param>
            <param name="TableName">Table name to run queries against to</param>
            <param name="Columns">Columns to include into result</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name. Used to identify single row</param>
            <param name="ParentIDColumnName">ForeignKey column name. Used to link child rows to parents</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">DatabaseAdapter connection string</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequestSDT.GetCurrentMode(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Gets type of current request
            </summary>
            <param name="QueryString">QueryString collection for current request</param>
            <returns>DataRequestType value that represents current request type (Select or Edit)</returns>
        </member>
        <member name="M:dhtmlxConnectors.DataRequestSDT.ProcessRequest(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Processes client request and performs operations requested by client components
            </summary>
            <param name="QueryString">QueryString collection of current request</param>
            <param name="Form">Form collection fof current request</param>
        </member>
        <member name="M:dhtmlxConnectors.DataRequestSDT.ParseDataActions(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Converts data actions from query string format to DataAction objects collection
            </summary>
            <param name="QueryString">QueryString collection that contains client data actions</param>
            <returns>Collection of DataAction objects</returns>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxOptionsConnector">
            <summary>
            Connector that serves dhtmlxGrid(treeGrid) combobox requests
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsConnector.#ctor(System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.String,System.Boolean)">
            <summary>
            Creates new instance of dhtmlxOptionsConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="ItemTextColumnName">Column name to take option's text from</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsConnector.#ctor(System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxOptionsConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="ItemTextColumnName">Column name to take option's text from</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsConnector.#ctor(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Render collection of items
            </summary>
            <param name="items"></param>
            <param name="valuePropertyName"></param>
            <param name="textPropertyName"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsConnector.#ctor(System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter,System.String,System.Boolean)">
            <summary>
            Creates new instance of dhtmlxOptionsConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="ItemTextColumnName">Column name to take option's text from</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsConnector.#ctor(System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter,System.String)">
            <summary>
            Creates new instance of dhtmlxOptionsConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="ItemTextColumnName">Column name to take option's text from</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsConnector.#ctor(System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.String,System.Boolean)">
            <summary>
            Creates new instance of dhtmlxOptionsConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="ItemTextColumnName">Column name to take option's text from</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsConnector.#ctor(System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxOptionsConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="ItemTextColumnName">Column name to take option's text from</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsConnector.#ctor(System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter,System.String,System.Boolean)">
            <summary>
            Creates new instance of dhtmlxOptionsConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="ItemTextColumnName">Column name to take option's text from</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsConnector.#ctor(System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter,System.String)">
            <summary>
            Creates new instance of dhtmlxOptionsConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="ItemTextColumnName">Column name to take option's text from</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsConnector.CreateDataItems(System.Data.DataTable)">
            <summary>
            Creates collection of dhtmlxComboItem objects from DataTable provided
            </summary>
            <param name="Rows">Table to create dhtmlxComboItem objects from</param>
            <returns>Collection of dhtmlxComboItem objects</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsConnector._CreateDataItems(System.Collections.IEnumerable,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            
            </summary>
            <param name="objects"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsConnector.BeginRenderContent(dhtmlxConnectors.IdhtmlxWriter,System.Int32)">
            <summary>
            Writes begin tags of response header
            </summary>
            <param name="xWriter">XmlWriter to render content to</param>
            <param name="TotalRowsCount">Total amount of rows available</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsConnector.RenderCustomCollection(dhtmlxConnectors.IdhtmlxWriter,System.Int32,System.Collections.Generic.ICollection{dhtmlxConnectors.dhtmlxOptionsItem})">
            <summary>
            Renders collection of dhtmlxOptionsItem objects like it was own select result
            </summary>
            <param name="xWriter">XmlWriter to write collection to</param>
            <param name="ColumnIndex">Column index to put items to</param>
            <param name="Options">Collection of options to render</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsConnector.RenderCustomCollection(dhtmlxConnectors.IdhtmlxWriter,System.String,System.Collections.Generic.ICollection{dhtmlxConnectors.dhtmlxOptionsItem})">
            <summary>
            Renders collection of dhtmlxOptionsItem objects like it was own select result
            </summary>
            <param name="xWriter">XmlWriter to write collection to</param>
            <param name="ColumnIndex">Column index to put items to</param>
            <param name="Options">Collection of options to render</param>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxOptionsConnector.ColumnIndex">
            <summary>
            Gets or Sets column index where combobox will be put
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxGridConnector">
            <summary>
            Serves dhtmlGrid client requests
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxGridConnector.Config">
            <summary>
            dhtmlxGridConfiguration instance
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConnector.#ctor(System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.String,System.Boolean)">
            <summary>
            Creates new instance of dhtmlxGridConnector
            </summary>
            <param name="SelectQuery">Select query to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="ExtraColumnNames">Columns to be included into select query, but ignored during render event</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConnector.#ctor(System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.Boolean)">
            <summary>
            Creates new instance of dhtmlxGridConnector
            </summary>
            <param name="SelectQuery">Select query to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConnector.#ctor(System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of dhtmlxGridConnector
            </summary>
            <param name="SelectQuery">Select query to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConnector.#ctor(System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxGridConnector
            </summary>
            <param name="TableName">Table name to run query against</param>
            <param name="Columns">Columns to select</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="ExtraColumnNames">Columns to be included into select query, but ignored during render event</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConnector.#ctor(System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of dhtmlxGridConnector
            </summary>
            <param name="TableName">Table name to run query against</param>
            <param name="Columns">Columns to select</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConnector.#ctor(System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter,System.String)">
            <summary>
            Creates new instance of dhtmlxGridConnector
            </summary>
            <param name="SelectQuery">Select query to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
            <param name="ExtraColumnNames">Columns to be included into select query, but ignored during render event</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConnector.#ctor(System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter)">
            <summary>
            Creates new instance of dhtmlxGridConnector
            </summary>
            <param name="SelectQuery">Select query to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConnector.#ctor(System.String,System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter,System.String)">
            <summary>
            Creates new instance of dhtmlxGridConnector
            </summary>
            <param name="TableName">Table name to run query against</param>
            <param name="Columns">Columns to select</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
            <param name="ExtraColumnNames">Columns to be included into select query, but ignored during render event</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConnector.#ctor(System.String,System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter)">
            <summary>
            Creates new instance of dhtmlxGridConnector
            </summary>
            <param name="TableName">Table name to run query against</param>
            <param name="Columns">Columns to select</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConnector.#ctor(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxGridConnector
            </summary>
            <param name="Data">Items collection</param>
            <param name="Properties">Properties to render</param>
            <param name="IdPropertyName">PrimaryKey property name (nullable)</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConnector.#ctor(System.Collections.IEnumerable,System.String,System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxGridConnector
            </summary>
            <param name="Data">Items collection</param>
            <param name="Properties">Properties to render</param>
            <param name="IdPropertyName">PrimaryKey property name (nullable)</param>
            <param name="ExtraProperyNames">Properties to be included into DataItems, but ignored during render event</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConnector.SetConfig(dhtmlxConnectors.dhtmlxGridConfiguration)">
            <summary>
            Attaching config object to grid
            </summary>
            <param name="config">dhtmlxGridConfiguration instance</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConnector.BeginRenderContent(dhtmlxConnectors.IdhtmlxWriter,System.Int32)">
            <summary>
            Writes begin tags of response header
            </summary>
            <param name="xWriter">XmlWriter to render content to</param>
            <param name="TotalRowsCount">Total amount of rows available</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConnector.CreateDataItems(System.Data.DataTable)">
            <summary>
            Creates collection of dhtmlxGridDataItem from DataTable provided
            </summary>
            <param name="Rows">DataTable to create items from</param>
            <returns>Collection of dhtmlxGridDataItem objects</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConnector._CreateDataItems(System.Collections.IEnumerable,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            
            </summary>
            <param name="objects"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxGridConnector.Configuration">
            <summary>
            dhtmlxGridConfiguration instance
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxXMLWriter">
            <summary>
            connectors XML response Writter
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxXMLWriter._sb">
            <summary>
            stores StringBuilder
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxXMLWriter.xWriter">
            <summary>
            stores XmlWriter
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxXMLWriter.#ctor(System.Text.StringBuilder,System.Web.HttpResponse)">
            <summary>
            creates instance of dhtmlxXMLWriter
            </summary>
            <param name="builder">String builder</param>
            <param name="response">HttpResponse</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxXMLWriter.WriteStartDocument(System.String)">
            <summary>
            writes start document tag
            </summary>
            <param name="title">start document tag</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxXMLWriter.WriteStartDocument">
            <summary>
            writes start document tag
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxXMLWriter.WriteAttribute(System.String,System.String)">
            <summary>
            writes xml attribute
            </summary>
            <param name="name">attribute name</param>
            <param name="value">attribute value</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxXMLWriter.WriteEndDocument">
            <summary>
            closes document tag
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxXMLWriter.WriteField(System.String,System.String)">
            <summary>
            writes name-value field, in this case simple xml node with text content
            </summary>
            <param name="name">node name</param>
            <param name="value">node value</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxXMLWriter.WriteStartElement(System.String)">
            <summary>
            opens element tag
            </summary>
            <param name="title">element tag</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxXMLWriter.WriteStartElement">
            <summary>
            opens element tag
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxXMLWriter.WriteEndElement">
            <summary>
            closes element tag
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxXMLWriter.WriteString(System.String)">
            <summary>
            writes string
            </summary>
            <param name="value">Calue</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxXMLWriter.GetResult">
            <summary>
            closes writer and returns result document
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxXMLWriter.WriteRawString(System.String)">
            <summary>
            writes string value to output(not necessary xml)
            </summary>
            <param name="value">string</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxXMLWriter.Reset">
            <summary>
            cleares stringBuilder`s buffer
            </summary>
            <returns>string</returns>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxXMLWriter.StringBuilder">
            <summary>
            getter for StringBuilder
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxXMLWriter.Response">
            <summary>
            gets instance of httpResponse
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxException">
            <summary>
            Exceptions class for dhtmlx components
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxException.#ctor">
            <summary>
            Creates new instance of dhtmlxException
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxException.#ctor(System.String)">
            <summary>
            Creates new instance of dhtmlxException
            </summary>
            <param name="Message">Exception message</param>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxDBException">
            <summary>
            Database exceptions class for dhtmlx components
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDBException.#ctor">
            <summary>
            Creates new instance of dhtmlxDBException
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDBException.#ctor(System.String)">
            <summary>
            Creates new instance of dhtmlxDBException
            </summary>
            <param name="Message">Exception message</param>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxDataViewDataItem">
            <summary>
            Represents dhtmlxDataView data item
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataViewDataItem.RenderStartContent(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Outputs DataItem content to IdhtmlxWriter
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="T:dhtmlxConnectors.TableField">
            <summary>
            Represents sql query field
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.TableField.ToString">
            <summary>
            Converts current column into SQL-92 string
            </summary>
            <returns>String representation of column</returns>
        </member>
        <member name="M:dhtmlxConnectors.TableField.#ctor">
            <summary>
            Creates new instance of TableField
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.TableField.#ctor(System.String)">
            <summary>
            Creates new instance of TableField
            </summary>
            <param name="Name">Field name</param>
        </member>
        <member name="M:dhtmlxConnectors.TableField.#ctor(System.String,System.String)">
            <summary>
            Creates new instance of TableField
            </summary>
            <param name="Name">Field name</param>
            <param name="Alias">Field alias</param>
        </member>
        <member name="M:dhtmlxConnectors.TableField.op_Explicit(System.String)~dhtmlxConnectors.TableField">
            <summary>
            Converts string into TableField object
            </summary>
            <param name="FieldName">Field name to convert into TableField</param>
            <returns>new TableField object created from FieldName string</returns>
        </member>
        <member name="M:dhtmlxConnectors.TableField.op_Explicit(dhtmlxConnectors.TableField)~System.String">
            <summary>
            Converts TableField object into string
            </summary>
            <param name="field">Field to convert</param>
            <returns>String representation of TableField object</returns>
        </member>
        <member name="M:dhtmlxConnectors.TableField.Clone">
            <summary>
            Clones this field
            </summary>
            <returns>Copy of field being cloned</returns>
        </member>
        <member name="P:dhtmlxConnectors.TableField.Name">
            <summary>
            Gets or Sets column name
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.TableField.ExternalName">
            <summary>
            Gets field name to be used when referencing this field outside the query (e.g. accessing specified column in DataTable)
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.TableField.InternalName">
            <summary>
            Gets field name to be used when referencing this field inside the query
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.OrderByField">
            <summary>
            Represents single ORDER BY element (e.g. ORDER BY "CustomerName" or "CreatedDate DESC")
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.OrderByField.#ctor(dhtmlxConnectors.Field,System.String)">
            <summary>
            Creates new instance of OrderByField
            </summary>
            <param name="OrderField">Field to order by</param>
            <param name="SortDirection">Sort direction (Asc or Desc)</param>
        </member>
        <member name="M:dhtmlxConnectors.OrderByField.#ctor(dhtmlxConnectors.Field,System.Web.UI.WebControls.SortDirection)">
            <summary>
            Creates new instance of OrderByField
            </summary>
            <param name="OrderField">Field to order by</param>
            <param name="Direction">Sort direction</param>
        </member>
        <member name="M:dhtmlxConnectors.OrderByField.ToString">
            <summary>
            Converts current OrderByField to SQL-92 string
            </summary>
            <returns>SQL-92 representation of current statement</returns>
        </member>
        <member name="M:dhtmlxConnectors.OrderByField.ParseDirection(System.String)">
            <summary>
            Converts specified value to valid SortDirection enum representation
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="P:dhtmlxConnectors.OrderByField.Field">
            <summary>
            Gets or Sets field to order by
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.OrderByField.Direction">
            <summary>
            Gets or Sets order direction
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.ObjectAdapter">
            <summary>
            
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.ObjectAdapter.ParseField(System.String)">
            <summary>
            
            </summary>
            <param name="FieldExpression"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.ObjectAdapter.GetData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.ObjectAdapter.ExecuteGetCountQuery(System.String,System.Collections.Generic.List{dhtmlxConnectors.Rule},System.String,System.String)">
            <summary>
            
            </summary>
            <param name="TableName"></param>
            <param name="Rules"></param>
            <param name="groupBy"></param>
            <param name="having"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.ObjectAdapter.ExecuteGetCountQuery(System.String,System.Collections.Generic.List{dhtmlxConnectors.Rule})">
            <summary>
            
            </summary>
            <param name="TableName"></param>
            <param name="Rules"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.ObjectAdapter.ExecuteGetCountQuery(System.String)">
            <summary>
            
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.ObjectAdapter.ExecuteSelectQuery(System.String,System.Collections.Generic.IEnumerable{dhtmlxConnectors.Field},System.Collections.Generic.List{dhtmlxConnectors.Rule},System.Collections.Generic.List{dhtmlxConnectors.OrderByStatement},System.Int32,System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="TableName"></param>
            <param name="RequestedFields"></param>
            <param name="Rules"></param>
            <param name="OrderBy"></param>
            <param name="StartIndex"></param>
            <param name="Count"></param>
            <param name="GroupBy"></param>
            <param name="Having"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.ObjectAdapter.ExecuteDeleteQuery(System.String,dhtmlxConnectors.Field,System.Object)">
            <summary>
            
            </summary>
            <param name="TableName"></param>
            <param name="PrimaryKeyField"></param>
            <param name="PrimaryKeyValue"></param>
        </member>
        <member name="M:dhtmlxConnectors.ObjectAdapter.ExecuteUpdateQuery(System.String,System.Collections.Generic.Dictionary{dhtmlxConnectors.Field,System.String},dhtmlxConnectors.Field,System.Object)">
            <summary>
            
            </summary>
            <param name="TableName"></param>
            <param name="NewColumnValues"></param>
            <param name="PrimaryKeyField"></param>
            <param name="PrimaryKeyValue"></param>
        </member>
        <member name="M:dhtmlxConnectors.ObjectAdapter.ExecuteInsertQuery(System.String,System.Collections.Generic.Dictionary{dhtmlxConnectors.Field,System.String},dhtmlxConnectors.Field,System.Object,dhtmlxConnectors.dhtmlxFieldsCollection)">
            <summary>
            
            </summary>
            <param name="TableName"></param>
            <param name="ColumnValues"></param>
            <param name="PrimaryKeyField"></param>
            <param name="PrimaryKeyValue"></param>
            <param name="AllFields"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.ObjectAdapter.ParseSqlQuery(System.String,System.String@,System.Collections.Generic.IEnumerable{dhtmlxConnectors.Field}@,System.Collections.Generic.List{dhtmlxConnectors.Rule}@,System.Collections.Generic.List{dhtmlxConnectors.OrderByStatement}@,System.Int32@,System.Int32@,System.String@,System.String@,dhtmlxConnectors.DataRequest.SourceType)">
            <summary>
            
            </summary>
            <param name="sqlQuery"></param>
            <param name="TableName"></param>
            <param name="RequestedFields"></param>
            <param name="Rules"></param>
            <param name="OrderBy"></param>
            <param name="StartIndex"></param>
            <param name="Count"></param>
            <param name="GroupBy"></param>
            <param name="Having"></param>
            <param name="queryType"></param>
        </member>
        <member name="M:dhtmlxConnectors.ObjectAdapter.IsFieldName(System.String)">
            <summary>
            
            </summary>
            <param name="FieldName"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.ObjectAdapter.ExecuteNonQuery(System.String)">
            <summary>
            
            </summary>
            <param name="Query"></param>
        </member>
        <member name="M:dhtmlxConnectors.ObjectAdapter.ExecuteScalar(System.String)">
            <summary>
            
            </summary>
            <param name="Query"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.ObjectAdapter.ExecuteSelectQuery(System.String)">
            <summary>
            
            </summary>
            <param name="Query"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.ObjectAdapter.BeginTransaction">
            <summary>
            
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.ObjectAdapter.CommitTransaction">
            <summary>
            
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.ObjectAdapter.RollbackTransaction">
            <summary>
            
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.ObjectAdapter.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.ObjectAdapter.ConnectionString">
            <summary>
            
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.ObjectAdapter.SupportsTransactions">
            <summary>
            
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.DataSelectedEventArgs">
            <summary>
            DataSelected event arguments class
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.DataSelectedEventArgs.#ctor(System.Data.DataTable,System.Int32)">
            <summary>
            Created new instance of DataSelectedEventArgs class
            </summary>
            <param name="Data">Query result</param>
            <param name="TotalRowsCount">Total rows count</param>
        </member>
        <member name="P:dhtmlxConnectors.DataSelectedEventArgs.Data">
            <summary>
            Gets or Sets reference to query result
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataSelectedEventArgs.TotalRowsCount">
            <summary>
            Gets or Sets total number of records
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.ItemPrerenderEventArgs`1">
            <summary>
            ItemPrerender events args
            </summary>
            <typeparam name="T">Type if item that is going to render</typeparam>
        </member>
        <member name="M:dhtmlxConnectors.ItemPrerenderEventArgs`1.#ctor(`0)">
            <summary>
            Creates new instance of ItemPrerenderEventArgs
            </summary>
            <param name="DataItem">Reference to item going to render</param>
        </member>
        <member name="P:dhtmlxConnectors.ItemPrerenderEventArgs`1.DataItem">
            <summary>
            Gets reference to item going to render
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.DataActionProcessingEventArgs">
            <summary>
            DataActionProcessing event args class
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.DataActionProcessingEventArgs.#ctor(dhtmlxConnectors.DataAction)">
            <summary>
            Creates new instance of DataActionProcessingEventArgs
            </summary>
            <param name="Action">DataAction going to process</param>
        </member>
        <member name="P:dhtmlxConnectors.DataActionProcessingEventArgs.DataAction">
            <summary>
            Gets reference to DataAction going to process
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.RenderEventArgs">
            <summary>
            Render event args
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.RenderEventArgs.#ctor(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Creates new instance of RenderEventArgs
            </summary>
            <param name="Writer">XmlWriter used for rendering</param>
        </member>
        <member name="P:dhtmlxConnectors.RenderEventArgs.Writer">
            <summary>
            Gets reference to XmlWriter used for rendering
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.RequestChildrenEventArgs`1">
            <summary>
            RenderChildren event args
            </summary>
            <typeparam name="T">Type of dhtmlxDataItem for which children request is going to happen</typeparam>
        </member>
        <member name="M:dhtmlxConnectors.RequestChildrenEventArgs`1.#ctor(`0)">
            <summary>
            Creates new instance of RequestChildrenEventArgs
            </summary>
            <param name="HierarchicalDataItem">dhtmlxDataItem for which children request is going to happen</param>
        </member>
        <member name="P:dhtmlxConnectors.RequestChildrenEventArgs`1.HierarchicalDataItem">
            <summary>
            Gets reference to dhtmlxDataItem for which children request is going to happen
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.RequestChildrenEventArgs`1.HasChildren">
            <summary>
            Gets or Sets value indicating either HierarchicalDataItem has children or not
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.BDErrorEventArgs">
            <summary>
            database error event args
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.BDErrorEventArgs.#ctor(System.String)">
            <summary>
            creates instance of BDErrorEventArgs
            </summary>
            <param name="message">message</param>
        </member>
        <member name="P:dhtmlxConnectors.BDErrorEventArgs.Message">
            <summary>
            error message
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.DataRequestType">
            <summary>
            Specifies number of operations can be executed by DataRequest
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.DataRequestType.Select">
            <summary>
            Indicates that DataRequest is going to select data
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.DataRequestType.Edit">
            <summary>
            Indicates that DataRequest is going to modify one or more records
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.DataRequestType.SDT">
            <summary>
            Indicates that DataRequest is processing simple data transfer protocol request
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.AccessRights">
            <summary>
            Collection of access rights allowed for DataRequest
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.AccessRights.Select">
            <summary>
            Permission for Select operation
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.AccessRights.Update">
            <summary>
            Permission for Update operation
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.AccessRights.Insert">
            <summary>
            Permission for Insert operation
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.AccessRights.Delete">
            <summary>
            Permission for Delete operation
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.AccessRights.All">
            <summary>
            All operations are allowed
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.AccessRights.None">
            <summary>
            No operations are allowed
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.TransactionMode">
            <summary>
            Transaction modes supported by DataRequest
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.TransactionMode.None">
            <summary>
            No transactions will be used
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.TransactionMode.PerRequest">
            <summary>
            One common transaction will be used for all DataAction run during request
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.TransactionMode.PerRecord">
            <summary>
            Separate transactions will be used for every DataAction
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.CustomSQLType">
            <summary>
            Types of sql templates that can be set by user
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.CustomSQLType.Insert">
            <summary>
            Custom sql template for Insert operation
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.CustomSQLType.Delete">
            <summary>
            Custom sql template for Delete statement
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.CustomSQLType.Update">
            <summary>
            Custom sql template for Update statement
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector">
            <summary>
            TreeGrid connector, which uses different tables for different levels of item hieararchy
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector.#ctor(dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of dhtmlxTreeGridMultitableConnector
            </summary>    
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector.#ctor(dhtmlxConnectors.IdhtmlxDatabaseAdapter)">
            <summary>
            Creates new instance of dhtmlxTreeGridMultitableConnector
            </summary>   
            <param name="Adapter">Adapter to use for communication with database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector.ParseId(System.String,System.Boolean)">
            <summary>
            Parse multitable item id
            </summary>
            <param name="id"></param>
            <param name="setLevel"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector.ParseId(System.String)">
            <summary>
            Parse mulititable item id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector.GetLevel(System.Web.HttpRequest)">
            <summary>
            Get current request level
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector.idTranslateBefore(System.Object,dhtmlxConnectors.DataActionProcessingEventArgs)">
            <summary>
            remove level prefix from id, parent id and set new id before processing
            </summary>
            <param name="sender"></param>
            <param name="action"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector.idTranslateAfter(System.Object,dhtmlxConnectors.DataActionProcessingEventArgs)">
            <summary>
            Add level prefix in id and new id after processing
            </summary>
            <param name="sender"></param>
            <param name="action"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector.outIds(System.Object,dhtmlxConnectors.ItemPrerenderEventArgs{dhtmlxConnectors.dhtmlxTreeGridDataItem})">
            <summary>
            Add level prefix in id and new id after processing
            </summary>
            <param name="sender"></param>
            <param name="action"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector.beforeOut(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector.rulesIds(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector.hasChildren(System.Object,dhtmlxConnectors.RequestChildrenEventArgs{dhtmlxConnectors.dhtmlxTreeGridDataItem})">
            <summary>
            Add level prefix in id and new id after processing
            </summary>
            <param name="sender"></param>
            <param name="action"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector.ProcessRequest(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Processes client commands token from QueryString and Form collections
            </summary>
            <param name="QueryString">QueryString collection of client request</param>
            <param name="Form">Form collection of client request</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector.RenderQuery(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Process sql query
            </summary>
            <param name="SelectQuery"></param>
            <param name="PrimaryKeyColumnName"></param>
            <param name="ParentIDColumnName"></param>
            <param name="ExtraColumnNames"></param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector.RenderQuery(System.String,System.String,System.String,System.String)">
            <summary>
            Process sql query
            </summary>
            <param name="SelectQuery"></param>
            <param name="PrimaryKeyColumnName"></param>
            <param name="ParentIDColumnName"></param>
            <param name="ExtraColumnNames"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector.RenderQuery(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Process sql query
            </summary>
            <param name="SelectQuery"></param>
            <param name="PrimaryKeyColumnName"></param>
            <param name="ParentIDColumnName"></param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector.RenderQuery(System.String,System.String,System.String)">
            <summary>
            Process sql query
            </summary>
            <param name="SelectQuery"></param>
            <param name="PrimaryKeyColumnName"></param>
            <param name="ParentIDColumnName"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector.RenderTable(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Process table
            </summary>
            <param name="TableName"></param>
            <param name="Columns"></param>
            <param name="PrimaryKeyColumnName"></param>
            <param name="ParentIDColumnName"></param>
            <param name="ExtraColumnNames"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector.RenderTable(System.String,System.String,System.String,System.String)">
            <summary>
            Process table
            </summary>
            <param name="TableName"></param>
            <param name="Columns"></param>
            <param name="PrimaryKeyColumnName"></param>
            <param name="ParentIDColumnName"></param>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector.Level">
            <summary>
            Current level
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeGridMultitableConnector.MaxLevel">
            <summary>
            Max level
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxSchedulerConnector">
            <summary>
            Serves dhtmlxConnector requests
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxSchedulerConnector.Options">
            <summary>
            dictionary with predifined options,
            key - (string) Menu id
            values - option id, option value
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxSchedulerConnector.OptionsConnectors">
            <summary>
            dictionary with options connectors,
            key - menu id
            value - dhtmlxOptionsConnector
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxSchedulerConnector.Initialize(System.String,System.String,System.String)">
            <summary>
            Initializes own fields
            </summary>
            <param name="DetailsColumnNames">Comma-delimited list of columns that holds additional information about event to select and include into response (nullable)</param>
            <param name="StartDateColumnName">StartDate column name(nullable)</param>
            <param name="FinishDateColumnName">FinishDate column name(nullable)</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxSchedulerConnector.Request_BeforeSelect(System.Object,System.EventArgs)">
            <summary>
            Modifies DataRequest.Select method to reflect Scheduler specific parameters
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxSchedulerConnector.#ctor(System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates new instance of dhtmlxSchedulerConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="StartDateColumnName">Field name to take events' start date from</param>
            <param name="FinishDateColumnName">Field name to take events' finish date from</param>
            <param name="DetailsColumnNames">Additional comma-delimited column names that describe event to select and include into response</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxSchedulerConnector.#ctor(System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.String,System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxSchedulerConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="StartDateColumnName">Field name to take events' start date from</param>
            <param name="FinishDateColumnName">Field name to take events' finish date from</param>
            <param name="DetailsColumnNames">Additional comma-delimited column names that describe event to select and include into response</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxSchedulerConnector.#ctor(System.Collections.IEnumerable,System.String,System.String,System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxSchedulerConnector
            </summary>
            <param name="Data">Data to be rendered</param>
            <param name="IdPropertyName">ID property name (nullable)</param>
            <param name="StartDatePropertyName">Property name to take events' start date from</param>
            <param name="FinishDatePropertyName">Property name to take events' finish date from</param>
            <param name="DetailsPropertyNames">Additional comma-delimited property names that describe event to select and include into response</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxSchedulerConnector.#ctor(System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates new instance of dhtmlxSchedulerConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
            <param name="StartDateColumnName">Field name to take events' start date from</param>
            <param name="FinishDateColumnName">Field name to take events' finish date from</param>
            <param name="DetailsColumnNames">Additional comma-delimited column names that describe event to select and include into response</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxSchedulerConnector.#ctor(System.String,System.String,dhtmlxConnectors.IdhtmlxDatabaseAdapter,System.String,System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxSchedulerConnector
            </summary>
            <param name="SelectSource">Select query or Table name to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="Adapter">Adapter to use for communication with database engine</param>
            <param name="StartDateColumnName">Field name to take events' start date from</param>
            <param name="FinishDateColumnName">Field name to take events' finish date from</param>
            <param name="DetailsColumnNames">Additional comma-delimited column names that describe event to select and include into response</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxSchedulerConnector.BeginRenderContent(dhtmlxConnectors.IdhtmlxWriter,System.Int32)">
            <summary>
            Writes begin tags of response header
            </summary>
            <param name="xWriter">XmlWriter to render content to</param>
            <param name="TotalRowsCount">Total amount of rows available</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxSchedulerConnector.EndRenderContent(dhtmlxConnectors.IdhtmlxWriter,System.Int32)">
            <summary>
            Writes end tags of response header
            </summary>
            <param name="xWriter">XmlWriter to render content to</param>
            <param name="TotalRowsCount">Total amount of rows available</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxSchedulerConnector.GetFieldIndex(dhtmlxConnectors.Field)">
            <summary>
            Gets field index by object
            </summary>
            <param name="field">Field to find index for</param>
            <returns>Field index or -1 if not found</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxSchedulerConnector.CreateDataItems(System.Data.DataTable)">
            <summary>
            Creates collection of dhtmlxSchedulerDataItem objects from DataTable provided
            </summary>
            <param name="Rows">Table to create dhtmlxSchedulerDataItem objects from</param>
            <returns>Collection of dhtmlxSchedulerDataItem objects</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxSchedulerConnector.GetProperties(System.Object,dhtmlxConnectors.ObjectParser)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxSchedulerConnector._CreateDataItems(System.Collections.IEnumerable,System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            
            </summary>
            <param name="objects"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxSchedulerConnector.DecodeField(System.String)">
            <summary>
            Decodes field name to Field object
            </summary>
            <param name="EncodedField">Encoded field name token from QueryString</param>
            <returns>Field object that corresponds EncodedField, or null</returns>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxSchedulerConnector.AddOptionsConnector(System.String,dhtmlxConnectors.dhtmlxOptionsConnector)">
            <summary>
            attaches options to scheduler
            </summary>
            <param name="name">options title</param>
            <param name="options">options connector</param>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxSchedulerConnector.StartDateField">
            <summary>
            Gets or Sets field to take events' StartDate from
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxSchedulerConnector.FinishDateField">
            <summary>
            Gets or Sets field to take events' FinishDate from
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxSchedulerConnector.DetailsFields">
            <summary>
            Gets or Sets reference to collection of details fields that describe event
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxOptionsCollection">
            <summary>
            Represents collection of dhtmlxOptionsItem
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsCollection.Add(System.String,System.String)">
            <summary>
            Adds new option into collection
            </summary>
            <param name="Value">New option value</param>
            <param name="Text">New option text</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsCollection.Add(System.String)">
            <summary>
            Adds new option into collection
            </summary>
            <param name="Text">New option text</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsCollection.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds set of items into collection
            </summary>
            <param name="Options">List of options to add</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxOptionsCollection.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds set of items into collection
            </summary>
            <param name="Options">List of key-value pairs to create options from and add into current
            +collection</param>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxGridConfiguration">
            <summary>
            represents dhtmlxGrid configuration
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxGridConfiguration._HeaderDelimiter">
            <summary>
            delimiter in parameters string
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxGridConfiguration.HeaderNames">
            <summary>
            header columns names
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxGridConfiguration.HeaderWidths">
            <summary>
            header columns width
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxGridConfiguration.HeaderAlign">
            <summary>
            columns align
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxGridConfiguration.HeaderVAlign">
            <summary>
            columns vertical align
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxGridConfiguration.HeaderTypes">
            <summary>
            columns types
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxGridConfiguration.HeaderSorts">
            <summary>
            header columns sorts
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxGridConfiguration.HeaderColors">
            <summary>
            header columns colors
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxGridConfiguration.HeaderHidden">
            <summary>
            header columns hidden columns
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxGridConfiguration.HeaderIds">
            <summary>
            header columns ids
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxGridConfiguration.FooterAttaches">
            <summary>
            FooterAttaches
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxGridConfiguration.HeaderAttaches">
            <summary>
            HeaderAttaches
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxGridConfiguration.HeaderWidthsUnits">
            <summary>
            HeaderWidthsUnits (pixels or percents)
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.SetHeader(System.String)">
            <summary>
            set dhtmlxGrid headers names
            <param name="names">sting, headers names separated by delimiter(',' by default)</param>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.SetInitWidths(System.String)">
            <summary>
            set dhtmlxGrid columns widths in pixels
            <param name="wp">sting, width values separated by delimiter(',' by default)</param>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.SetInitWidthsP(System.String)">
            <summary>
            set dhtmlxGrid columns widths in percents
            <param name="wp">sting, width values separated by delimiter(',' by default)</param>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.SetColAlign(System.String)">
            <summary>
            set dhtmlxGrid columns align
            <param name="str">sting, align values separated by delimiter(',' by default)</param>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.SetColVAlign(System.String)">
            <summary>
            set dhtmlxGrid columns vertical align
            <param name="str">sting, align values separated by delimiter(',' by default)</param>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.SetColTypes(System.String)">
            <summary>
            set dhtmlxGrid columns types
            <param name="str">sting, columns types separated by delimiter(',' by default)</param>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.SetColSorting(System.String)">
            <summary>
            set dhtmlxGrid columns sortings
            <param name="str">sting, columns sortings separated by delimiter(',' by default)</param>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.SetColColor(System.String)">
            <summary>
            set dhtmlxGrid columns colors
            <param name="str">sting, columns colors separated by delimiter(',' by default)</param>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.SetColHidden(System.String)">
            <summary>
            set dhtmlxGrid columns hidden
            <param name="str">sting, columns 'is hidden' values separated by delimiter(',' by default)</param>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.SetColIds(System.String)">
            <summary>
            set dhtmlxGrid columns ids
            <param name="str">sting, columns ids separated by delimiter(',' by default)</param>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.AttachHeader(System.String)">
            <summary>
            attachs dhtmlxGrid header
            <param name="values">header values separated by delimiter(',' by default)</param>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.AttachHeader(System.String,System.String)">
            <summary>
            attachs dhtmlxGrid header
            <param name="values">header values separated by delimiter(',' by default)</param>
            <param name="styles">header styles separated by delimiter(',' by default)</param>   
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.AttachHeader(System.String,System.String,System.Boolean)">
            <summary>
            attachs dhtmlxGrid header
            <param name="values">header values separated by delimiter(',' by default)</param>
            <param name="styles">header styles separated by delimiter(',' by default)</param>
            <param name="footer">is its footer </param>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.AttachFooter(System.String,System.String)">
            <summary>
            attachs dhtmlxGrid footer
            <param name="values">footer values separated by delimiter(',' by default)</param>
            <param name="styles">footer styles separated by delimiter(',' by default)</param>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.AttachFooter(System.String)">
            <summary>
            attachs dhtmlxGrid footer
            <param name="values">footer values separated by delimiter(',' by default)</param>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.ParseParamArray(System.String,System.String[],System.String)">
            <summary>
            convert list(string) of parameters to an array
            <param name="param">string of parameters separated by delimiter(',' by default)</param>
            <param name="check"></param>
            <param name="def"></param>
            <returns>array of values</returns>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.ParseParamArray(System.String)">
            <summary>
            convert list(string) of parameters to an array
            <param name="param">string of parameters separated by delimiter(',' by default)</param>
            <returns>array of values</returns>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.ParseParamArray(System.String,System.String[])">
            <summary>
            convert list(string) of parameters to an array
            <param name="param">string of parameters separated by delimiter(',' by default)</param>
            <param name="check"></param>
            <returns>array of values</returns>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.ParseParamArray(System.String[],System.String[],System.String)">
            <summary>
            convert list of parameters to an array
            <param name="param">list of parameters separated by delimiter(',' by default)</param>
            <param name="check"></param>
            <param name="def"></param>
            <returns>array of values</returns>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.ParseParamArray(System.String[])">
            <summary>
            convert list of parameters to an array
            <param name="param">list of parameters separated by delimiter(',' by default)</param>
            <returns>array of values</returns>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.ParseParamArray(System.String[],System.String[])">
            <summary>
            convert list(string) of parameters to an array
            <param name="param">list of parameters separated by delimiter(',' by default)</param>
            <param name="check"></param>
            <returns>array of values</returns>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.AutoFill(System.Boolean)">
            <summary>
            auto fill config settings
            <param name="mode">auto fill mode</param>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.RenderHeader(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            renders header
            <param name="xWriter">XmlWriter</param>
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxGridConfiguration.RenderForExport">
            <summary>
            render configuration header to pdf/excel generators format 
            </summary>
            <returns>configuration string</returns>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxGridConfiguration.HeaderDelimiter">
            <summary>
            get or set header delimiter
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.Tools">
            <summary>
            Class container for helper methods
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.Tools.Join(System.Collections.IEnumerable,System.String)">
            <summary>
            Joins elements of collection into single string using separator provided
            </summary>
            <param name="Collection">Collection of elements of any type</param>
            <param name="Separator">Elements separator</param>
            <returns>String representation of collection elements</returns>
        </member>
        <member name="M:dhtmlxConnectors.Tools.EscapeQueryValue(System.Object)">
            <summary>
            Converts into string and escapes special characters in the Value to be included into SQL query
            </summary>
            <param name="Value">Object to be converted and escaped</param>
            <returns>SQL-valid string representation of value provided</returns>
        </member>
        <member name="M:dhtmlxConnectors.Tools.ConvertToString(System.Object)">
            <summary>
            Converts row value to format compatible with dhtmlx components
            </summary>
            <param name="value">Value to convert</param>
            <returns>String representation of object</returns>
        </member>
        <member name="P:dhtmlxConnectors.Tools.DateFormat">
            <summary>
            Gets or Sets date format used for communication with database engine
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.Extensions">
            <summary>
            Extension methods storage
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.Extensions.Optimize(System.Collections.Generic.IEnumerable{dhtmlxConnectors.Field})">
            <summary>
            Returns fields collection without duplicated or redundant items
            </summary>
            <param name="source">Collection to optimize</param>
            <returns>Fields collection without duplicated or redundant items</returns>
        </member>
        <member name="M:dhtmlxConnectors.Extensions.ToFieldsCollection(System.Collections.Generic.IEnumerable{dhtmlxConnectors.Field})">
            <summary>
            Converts fields collection into dhtmlxFieldsCollection object
            </summary>
            <param name="source">Collection to convert</param>
            <returns>dhtmlxFieldsCollection object</returns>
        </member>
        <member name="M:dhtmlxConnectors.Extensions.Add(System.Collections.Generic.Dictionary{dhtmlxConnectors.Field,System.String},System.String,System.String)">
            <summary>
            Adds Field-value pair into dictionary
            </summary>
            <param name="source">Dictionary to add element to</param>
            <param name="Name">Name to create field from</param>
            <param name="Value">Value to add into dictionary</param>
        </member>
        <member name="T:dhtmlxConnectors.OracleAdapter">
            <summary>
            Oracle compatible implementation of idhtmlxDatabaseAdapter interface
             
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.OracleAdapter.CreateConnection(System.String)">
            <summary>
            Creates initialized opened IDbConnection object
            </summary>
            <param name="ConnectionString">ConnectionString to initialize connection by</param>
            <returns></returns>
        </member>
        <member name="M:dhtmlxConnectors.OracleAdapter.CreateCommand(System.String,System.Data.IDbConnection)">
            <summary>
            Creates IDbCommand object
            </summary>
            <param name="Query">Query to initialize command with</param>
            <param name="Connection">Connection to initialize command with</param>
            <returns>IDbCommand object</returns>
        </member>
        <member name="M:dhtmlxConnectors.OracleAdapter.CreateDataAdapter(System.Data.IDbCommand)">
            <summary>
            Creates IDbDataAdapter
            </summary>
            <param name="Command">Command to initialize adapter with</param>
            <returns>IDbDataAdapter object</returns>
        </member>
        <member name="T:dhtmlxConnectors.DataAction">
            <summary>
            Represents action to be done against particular table
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.DataAction.#ctor(dhtmlxConnectors.ActionType,System.String,System.Collections.Generic.Dictionary{dhtmlxConnectors.Field,System.String},System.Collections.Generic.Dictionary{System.String,System.String},dhtmlxConnectors.Field,System.Object)">
            <summary>
            Creates new instance of DataAction
            </summary>
            <param name="ActionType">Type of data action</param>
            <param name="TableName">Table name</param>
            <param name="Data">Collection of column values</param>
            <param name="UserData">Collection of userdata values</param>
            <param name="PrimaryKeyField">PrimaryKey field</param>
            <param name="PrimaryKeyValue">PrimaryKey value</param>
        </member>
        <member name="M:dhtmlxConnectors.DataAction.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{dhtmlxConnectors.Field,System.String},System.Collections.Generic.Dictionary{System.String,System.String},dhtmlxConnectors.Field,System.Object)">
            <summary>
            Creates new instance of DataAction
            </summary>
            <param name="CustomActionName">Name of action. ActionType will be automatically set to Custom</param>
            <param name="TableName">Table name</param>
            <param name="Data">Collection of column values</param>
            <param name="UserData">Collection of userdata values</param>
            <param name="PrimaryKeyField">PrimaryKey field</param>
            <param name="PrimaryKeyValue">PrimaryKey value</param>
        </member>
        <member name="M:dhtmlxConnectors.DataAction.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{dhtmlxConnectors.Field,System.String},System.Collections.Generic.Dictionary{System.String,System.String},dhtmlxConnectors.Field,System.Object,System.Object)">
            <summary>
            Creates new instance of DataAction
            </summary>
            <param name="CustomActionName">Name of action. ActionType will be automatically set to Custom</param>
            <param name="TableName">Table name</param>
            <param name="Data">Collection of column values</param>
            <param name="UserData">Collection of userdata values</param>
            <param name="PrimaryKeyField">PrimaryKey field</param>
            <param name="PrimaryKeyValue">Old PrimaryKey value</param>
            <param name="PostoperationalPrimaryKeyValue">New PrimaryKey value</param>
        </member>
        <member name="M:dhtmlxConnectors.DataAction.#ctor(dhtmlxConnectors.ActionType,System.String,System.Collections.Generic.Dictionary{dhtmlxConnectors.Field,System.String},System.Collections.Generic.Dictionary{System.String,System.String},dhtmlxConnectors.Field,System.Object,System.Object)">
            <summary>
            Creates new instance of DataAction
            </summary>
            <param name="ActionType">Type of data action</param>
            <param name="TableName">Table name</param>
            <param name="Data">Collection of column values</param>
            <param name="UserData">Collection of userdata values</param>
            <param name="PrimaryKeyField">PrimaryKey field</param>
            <param name="PrimaryKeyValue">Old PrimaryKey value</param>
            <param name="PostoperationalPrimaryKeyValue">New PrimaryKey value</param>
        </member>
        <member name="M:dhtmlxConnectors.DataAction.SetInitialActionType(dhtmlxConnectors.ActionType)">
            <summary>
            Sets ActionType and modifies Completed state according to it
            </summary>
            <param name="ActionType">ActionType to set</param>
        </member>
        <member name="M:dhtmlxConnectors.DataAction.SetCompletedWithStatus(dhtmlxConnectors.ActionType)">
            <summary>
            Sets current action Completed status to true with applying new ActionType
            </summary>
            <param name="ActionType">New ActionType to apply</param>
        </member>
        <member name="M:dhtmlxConnectors.DataAction.ChangeActionType(dhtmlxConnectors.ActionType)">
            <summary>
            Changes current action type. If new type is ActionType.Error or ActionType.Invalid current action will be marked as completed, no matter whether it was completed before or not.
            </summary>
            <param name="ActionType">New ActionType to apply</param>
        </member>
        <member name="M:dhtmlxConnectors.DataAction.ChangeActionType(System.String)">
            <summary>
            Changes current action type to ActionType.Custom. Completed state will be turned to false
            </summary>
            <param name="CustomActionName">Custom action name</param>
        </member>
        <member name="M:dhtmlxConnectors.DataAction.SetCompleted">
            <summary>
            Marks current action as completed
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.DataAction.SetFailed">
            <summary>
            Marks current action as failed
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.DataAction.SetFailed(System.String)">
            <summary>
            Marks current action as failed
            </summary>
            <param name="Reason">Failure reason</param>
        </member>
        <member name="M:dhtmlxConnectors.DataAction.SetInvalid">
            <summary>
            Mark current action as Invalid
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.DataAction.SetInvalid(System.String)">
            <summary>
            Mark current action as Invalid
            </summary>
            <param name="Reason">Reason</param>
        </member>
        <member name="M:dhtmlxConnectors.DataAction.ToString">
            <summary>
            Convert DataAction to its string representation
            </summary>
            <returns>String representation of DataAction</returns>
        </member>
        <member name="P:dhtmlxConnectors.DataAction.ActionProtocol">
            <summary>
            Gets protocol of this action
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataAction.ActionType">
            <summary>
            Gets type of this action. ActionType can only be set in object constructor
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataAction.CustomActionName">
            <summary>
            Gets or Sets action name in case of user defined action
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataAction.PrimaryKeyValue">
            <summary>
            Gets or Sets PrimaryKey field value
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataAction.PostoperationalPrimaryKeyValue">
            <summary>
            Gets or Sets new PrimaryKey field value which was retrieved after action execution
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataAction.CustomAttribs">
            <summary>
            Gets collection of custom attributes to be sent to client with response
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataAction.Data">
            <summary>
            Gets reference to collection of field-value pairs to apply to database record during data action execution
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataAction.UserData">
            <summary>
            Gets reference to UserData collection that may come with request
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataAction.TableName">
            <summary>
            Gets or Sets table name
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataAction.PrimaryKeyField">
            <summary>
            Gets or Sets primary key field
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataAction.Details">
            <summary>
            Gets or Sets DataAction details
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.DataAction.Completed">
            <summary>
            Gets value indicating whether action was executed
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.ActionType">
            <summary>
            Known action types
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.ActionType.Deleted">
            <summary>
            Delete action
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.ActionType.Inserted">
            <summary>
            Insert action
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.ActionType.Updated">
            <summary>
            Update action
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.ActionType.Invalid">
            <summary>
            Action is invalid
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.ActionType.Error">
            <summary>
            Action caused an error
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.ActionType.Custom">
            <summary>
            User-defined action
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.ActionProtocol">
            <summary>
            Supported action protocols 
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.ActionProtocol.SDT">
            <summary>
            Simple data transfer protocol
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.ActionProtocol.Standart">
            <summary>
            Basic protocol
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxTreeGridDataItem">
            <summary>
            Represents dhtmlxTreeGrid row
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridDataItem.RenderStartContent(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Outputs DataItem content to IdhtmlxWriter
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeGridDataItem.RenderEndContent(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Outputs DataItem content to IdhtmlxWriter
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeGridDataItem.HasChildren">
            <summary>
            Gets or Sets value indicating either data item has children or not
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeGridDataItem.Image">
            <summary>
            Gets or Sets picture name to insert into the first cell of row
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.dhtmlxTreeGridDataItem.ChildRows">
            <summary>
            Gets reference to collection of child items
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxDataJsonConnectorDataItem">
            <summary>
            Represents dhtmlxJSONDataConnector data item
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataJsonConnectorDataItem.RenderStartContent(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Outputs DataItem content to IdhtmlxWriter
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="T:dhtmlxConnectors.FieldRule">
            <summary>
            Represents single WHERE statement item (e.g. "OrderID = 15", StartData > '01-01-2009' etc)
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.FieldRule.#ctor(dhtmlxConnectors.Field,dhtmlxConnectors.Operator,System.Object)">
            <summary>
            Creates new instance of FieldRule
            </summary>
            <param name="RuleField">Field to compare</param>
            <param name="CompareOperator">Compare operator</param>
            <param name="CompareValue">Value to compare field with</param>
        </member>
        <member name="M:dhtmlxConnectors.FieldRule.#ctor(System.String,dhtmlxConnectors.Operator,System.Object)">
            <summary>
            Creates new instance of FieldRule
            </summary>
            <param name="RuleFieldName">FieldName to compare</param>
            <param name="CompareOperator">Compare operator</param>
            <param name="CompareValue">Value to compare field with</param>
        </member>
        <member name="M:dhtmlxConnectors.FieldRule.ToString">
            <summary>
            Converts this FieldRule into SQL-92 string
            </summary>
            <returns>String representation of this FieldRule</returns>
        </member>
        <member name="P:dhtmlxConnectors.FieldRule.Field">
            <summary>
            Gets or Sets field to compare
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.FieldRule.Value">
            <summary>
            Gets or Sets value to compare field with
            </summary>
        </member>
        <member name="P:dhtmlxConnectors.FieldRule.Operator">
            <summary>
            Gets or Sets compare operator 
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.Operator">
            <summary>
            Supported compare operators
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.Operator.Equals">
            <summary>
            =
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.Operator.NotEquals">
            <summary>
            !=
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.Operator.Greater">
            <summary>
            >
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.Operator.GreaterOrEqual">
            <summary>
            >=
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.Operator.Lower">
            <summary>
            &lt;
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.Operator.LowerOrEqual">
            <summary>
            &lt;=
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.Operator.Like">
            <summary>
            LIKE '%VALUE%'
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.Operator.DoesntLike">
            <summary>
            NOT LIKE '%VALUE%'
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.DatabaseAdapterFactory">
            <summary>
            Factory class to create instances of different dhtmlxDatabaseAdapters
            throws: NotImplementedException
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.DatabaseAdapterFactory.CreateAdapter(dhtmlxConnectors.dhtmlxDatabaseAdapterType)">
            <summary>
            Creates dhtmlxDatabaseAdapter instance
            </summary>
            <param name="type">dhtmlxDatabaseAdapterType</param>
            <returns>IdhtmlxDatabaseAdapter</returns>
        </member>
        <member name="M:dhtmlxConnectors.DatabaseAdapterFactory.getByType(System.String)">
            <summary>
            creating not native adapters instances by type name, so if some data providers wouldn`t be installed in the system
            their dhtmlxAdapters classes can be excluded from the project, so it can be recompiled if it`s needed
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxDatabaseAdapterType">
            <summary>
            Supported database adapters type
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxDatabaseAdapterType.SqlServer2005">
            <summary>
            Microsoft SQL Server 2000-2010
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxDatabaseAdapterType.Odbc">
            <summary>
            ODBC adapter
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxDatabaseAdapterType.OdbcOracle">
            <summary>
            ODBC Oracle adapter
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxDatabaseAdapterType.SQLite">
            <summary>
            SQLite adapter
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxDatabaseAdapterType.MySQL">
            <summary>
            MySQL adapter
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxDatabaseAdapterType.PostgreSQL">
            <summary>
            PostgreSQL adapter
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxDatabaseAdapterType.Oracle">
            <summary>
            Oracle adapter
            </summary>
        </member>
        <member name="F:dhtmlxConnectors.dhtmlxDatabaseAdapterType.Unknown">
            <summary>
            User-defined adapter
            </summary>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxTreeDataJsonDataItem">
            <summary>
            Item of JsonDataTree
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxTreeDataJsonDataItem.RenderEndContent(dhtmlxConnectors.IdhtmlxWriter)">
            <summary>
            Outputs DataItem content to IdhtmlxWriter
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxFieldOptionsCollection">
            <summary>
            Represents collection of Field-dhtmlxOptionsCollection pairs
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxFieldOptionsCollection.Add(dhtmlxConnectors.Field,System.String)">
            <summary>
            Adds new Option into collection that belongs to the field provided.
            </summary>
            <param name="field">Field to add option to. If there's no collection for this field - one will be created.</param>
            <param name="OptionText">Text to create option from</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxFieldOptionsCollection.Add(dhtmlxConnectors.Field,System.String,System.String)">
            <summary>
            Adds new Option into collection that belongs to the field provided.
            </summary>
            <param name="field">Field to add option to. If there's no collection for this field - one will be created.</param>
            <param name="OptionValue">Value to create option from</param>
            <param name="OptionText">Text to create option from</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxFieldOptionsCollection.Add(dhtmlxConnectors.Field,dhtmlxConnectors.dhtmlxOptionsItem)">
            <summary>
            Adds new Option into collection that belongs to the field provided.
            </summary>
            <param name="field">Field to add option to. If there's no collection for this field - one will be created.</param>
            <param name="option">Option to add into collection</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxFieldOptionsCollection.Add(dhtmlxConnectors.Field,System.String[])">
            <summary>
            Adds set of options into collection that belongs to the field provided.
            </summary>
            <param name="field">Field to add option to. If there's no collection for this field - one will be created.</param>
            <param name="Options">Option texts to create options from</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxFieldOptionsCollection.Add(dhtmlxConnectors.Field,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds set of options into collection that belongs to the field provided.
            </summary>
            <param name="field">Field to add option to. If there's no collection for this field - one will be created.</param>
            <param name="Options">List of option texts to create options from</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxFieldOptionsCollection.Add(dhtmlxConnectors.Field,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds set of options into collection that belongs to the field provided.
            </summary>
            <param name="field">Field to add option to. If there's no collection for this field - one will be created.</param>
            <param name="Options">Collection of Value-Text to create options list from</param>
        </member>
        <member name="T:dhtmlxConnectors.dhtmlxDataConnector">
            <summary>
            Serves dhtmlxDataConnector client requests
            </summary>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataConnector.#ctor(System.String,System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of dhtmlxDataConnector
            </summary>
            <param name="TableName">Select query to use for data retrieval</param>
            <param name="Columns">Type of adapter to use for communication with database engine</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataConnector.#ctor(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Creates new instance of dhtmlxDataViewConnector
            </summary>
            <param name="items">Collection of data to be rendered</param>
            <param name="Properties">Comma separated properties to be rendered</param>
            <param name="IdPropertyName"></param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataConnector.#ctor(System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String,System.Boolean)">
            <summary>
            Creates new instance of dhtmlxDataConnector
            </summary>
            <param name="SelectQuery">Select query to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
            <param name="asIs">Defines whether connector should parse Sql query to generate create/delete/update queries, or use it without processing</param>
        </member>
        <member name="M:dhtmlxConnectors.dhtmlxDataConnector.#ctor(System.String,System.String,dhtmlxConnectors.dhtmlxDatabaseAdapterType,System.String)">
            <summary>
            Creates new instance of dhtmlxDataConnector
            </summary>
            <param name="SelectQuery">Select query to use for data retrieval</param>
            <param name="PrimaryKeyColumnName">PrimaryKey column name (nullable)</param>
            <param name="AdapterType">Type of adapter to use for communication with database engine</param>
            <param name="ConnectionString">ConnectionString for connection to database engine</param>
        </member>
    </members>
</doc>
